<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hugo: A Fast and Flexible Website Generator</title>
    <link>https://gohugo.io/</link>
    <description>Recent content on Hugo: A Fast and Flexible Website Generator</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 02 Mar 2017 12:00:00 -0500</lastBuildDate>
    
	<atom:link href="https://gohugo.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hugo Documentation</title>
      <link>https://gohugo.io/documentation/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/documentation/</guid>
      <description>Hugo is the world&amp;rsquo;s fastest static website engine. It&amp;rsquo;s written in Go (aka Golang) and developed by bep, spf13 and friends. Below you will find some of the most common and helpful pages from our documentation.</description>
    </item>
    
    <item>
      <title>Contribute to Hugo Development</title>
      <link>https://gohugo.io/contribute/development/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/contribute/development/</guid>
      <description>Introduction Hugo is an open-source project and lives by the work of its contributors. There are plenty of open issues, and we need your help to make Hugo even more awesome. You don&amp;rsquo;t need to be a Go guru to contribute to the project&amp;rsquo;s development.
Assumptions This contribution guide takes a step-by-step approach in hopes of helping newcomers. Therefore, we only assume the following:
 You are new to Git or open-source projects in general You are a fan of Hugo and enthusiastic about contributing to the project   If you&amp;rsquo;re struggling at any point in this contribution guide, reach out to the Hugo community in Hugo&amp;rsquo;s Discussion forum.</description>
    </item>
    
    <item>
      <title>Hosting on Netlify</title>
      <link>https://gohugo.io/hosting-and-deployment/hosting-on-netlify/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/hosting-and-deployment/hosting-on-netlify/</guid>
      <description>Netlify provides continuous deployment services, global CDN, ultra-fast DNS, atomic deploys, instant cache invalidation, one-click SSL, a browser-based interface, a CLI, and many other features for managing your Hugo website.
Assumptions  You have an account with GitHub, GitLab, or Bitbucket. You have completed the Quick Start or have Hugo website you are ready to deploy and share with the world. You do not already have a Netlify account.  Create a Netlify account Go to app.</description>
    </item>
    
    <item>
      <title>Installing and Using Themes</title>
      <link>https://gohugo.io/themes/installing-and-using-themes/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/themes/installing-and-using-themes/</guid>
      <description>Hugo currently doesn’t ship with a “default” theme. This decision is intentional. We leave it up to you to decide which theme best suits your Hugo project.
  Assumptions  You have already installed Hugo on your development machine. You have git installed on your machine and you are familiar with basic git usage.  Install Themes The community-contributed themes featured on themes.gohugo.io are hosted in a centralized GitHub repository.</description>
    </item>
    
    <item>
      <title>Introduction to Hugo Templating</title>
      <link>https://gohugo.io/templates/introduction/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/templates/introduction/</guid>
      <description>The following is only a primer on Go templates. For an in-depth look into Go templates, check the official Go docs.
  Go templates provide an extremely simple template language that adheres to the belief that only the most basic of logic belongs in the template or view layer.
Basic Syntax Golang templates are HTML files with the addition of variables and [functions][functions]. Golang template variables and functions are accessible within {{ }}.</description>
    </item>
    
    <item>
      <title>Migrate to Hugo</title>
      <link>https://gohugo.io/tools/migrations/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/tools/migrations/</guid>
      <description>This section highlights some projects around Hugo that are independently developed. These tools try to extend the functionality of our static site generator or help you to get started.
 Do you know or maintain a similar project around Hugo? Feel free to open a pull request on GitHub if you think it should be added.
  Take a look at this list of migration tools if you currently use other logging tools like Jekyll or WordPress but intend to switch to Hugo instead.</description>
    </item>
    
    <item>
      <title>Content Organization</title>
      <link>https://gohugo.io/content-management/organization/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/content-management/organization/</guid>
      <description>This section is not updated with the new nested sections support in Hugo 0.24, see https://github.com/circleci/ccidemoDocs/issues/36
  Organization of Content Source In Hugo, your content should be organized in a manner that reflects the rendered website.
While Hugo supports content nested at any level, the top levels (i.e. content/&amp;lt;DIRECTORIES&amp;gt;) are special in Hugo and are considered the content sections. Without any additional configuration, the following will just work:</description>
    </item>
    
    <item>
      <title>Site Variables</title>
      <link>https://gohugo.io/variables/site/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/variables/site/</guid>
      <description>The following is a list of site-level (aka &amp;ldquo;global&amp;rdquo;) variables. Many of these variables are defined in your site&amp;rsquo;s configuration file, whereas others are built into Hugo&amp;rsquo;s core for convenient usage in your templates.
Site Variables List  .Site.AllPages array of all pages, regardless of their translation. .Site.Author a map of the authors as defined in the site configuration. .Site.BaseURL the base URL for the site as defined in the site configuration.</description>
    </item>
    
    <item>
      <title>What is Hugo</title>
      <link>https://gohugo.io/about/what-is-hugo/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/about/what-is-hugo/</guid>
      <description>Hugo is a general-purpose website framework. Technically speaking, Hugo is a static site generator. Unlike systems that dynamically build a page with each visitor request, Hugo builds pages when you create or update your content. Since websites are viewed far more often than they are edited, Hugo is designed to provide an optimal viewing experience for your website&amp;rsquo;s end users and an ideal writing experience for website authors.
Websites built with Hugo are extremely fast and secure.</description>
    </item>
    
    <item>
      <title>Quick Start</title>
      <link>https://gohugo.io/getting-started/quick-start/</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/getting-started/quick-start/</guid>
      <description>This Quick Start was originally written by Shekhar Gulati in his 52 Technologies in 2016 blog series but has been heavily modified to represent additional features and other changes to Hugo.
  In this Quick Start, we will build an online bookshelf that lists books and their reviews.
Step 1. Install Hugo Install Hugo. If installing from Hugo releases, you&amp;rsquo;ll need to save the main executable as hugo (or hugo.</description>
    </item>
    
    <item>
      <title>Hugo&#39;s Lookup Order</title>
      <link>https://gohugo.io/templates/lookup-order/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/templates/lookup-order/</guid>
      <description>Before creating your templates, it&amp;rsquo;s important to know how Hugo looks for files within your project&amp;rsquo;s directory structure.
Hugo uses a prioritized list called the lookup order as it traverses your layouts folder in your Hugo project looking for the appropriate template to render your content.
The template lookup order is an inverted cascade: if template A isn’t present or specified, Hugo will look to template B. If template B isn&amp;rsquo;t present or specified, Hugo will look for template C&amp;hellip;and so on until it reaches the _default/ directory for your project or theme.</description>
    </item>
    
    <item>
      <title>Custom Output Formats</title>
      <link>https://gohugo.io/templates/output-formats/</link>
      <pubDate>Wed, 22 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/templates/output-formats/</guid>
      <description>This page describes how to properly configure your site with the media types and output formats, as well as where to create your templates for your custom outputs.
Media Types A media type (also known as MIME type and content type) is a two-part identifier for file formats and format contents transmitted on the Internet.
This is the full set of built-in media types in Hugo:
 Type Suffix   application/javascript js   application/json json   application/rss xml   application/xml xml   text/calendar ics   text/css css   text/csv csv   text/html html   text/plain txt   Note:</description>
    </item>
    
    <item>
      <title>Hosting on Firebase</title>
      <link>https://gohugo.io/hosting-and-deployment/hosting-on-firebase/</link>
      <pubDate>Sun, 12 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/hosting-and-deployment/hosting-on-firebase/</guid>
      <description>Assumptions  You have an account with Firebase. (If you don&amp;rsquo;t, you can sign up for free using your Google account.) You have completed the Quick Start or have a completed Hugo website ready for deployment.  Initial setup Go to the Firebase console and create a new project (unless you already have a project). You will need to globally install firebase-tools (node.js):
npm install -g firebase-tools  Log in to Firebase (setup on your local machine) using firebase login, which opens a browser where you can select your account.</description>
    </item>
    
    <item>
      <title>Shortcode Variables</title>
      <link>https://gohugo.io/variables/shortcodes/</link>
      <pubDate>Sun, 12 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/variables/shortcodes/</guid>
      <description>Shortcodes have access to parameters delimited in the shortcode declaration via .Get, page- and site-level variables, and also the following shortcode-specific fields:
 .Parent provides access to the parent shortcode context in nested shortcodes. This can be very useful for inheritance of common shortcode parameters from the root. .IsNamedParams boolean that returns true when the shortcode in question uses named rather than positional parameters .Inner represents the content between the opening and closing shortcode tags when a closing shortcode is used  </description>
    </item>
    
    <item>
      <title>Base Templates and Blocks</title>
      <link>https://gohugo.io/templates/base/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/templates/base/</guid>
      <description>The block keyword allows you to define the outer shell of your pages&amp;rsquo; one or more master template(s) and then fill in or override portions as necessary.
Base Template Lookup Order The lookup order for base templates is as follows:
 /layouts/section/&amp;lt;TYPE&amp;gt;-baseof.html /themes/&amp;lt;THEME&amp;gt;/layouts/section/&amp;lt;TYPE&amp;gt;-baseof.html /layouts/&amp;lt;TYPE&amp;gt;/baseof.html /themes/&amp;lt;THEME&amp;gt;/layouts/&amp;lt;TYPE&amp;gt;/baseof.html /layouts/section/baseof.html /themes/&amp;lt;THEME&amp;gt;/layouts/section/baseof.html /layouts/_default/post-baseof.html /themes/&amp;lt;THEME&amp;gt;/layouts/_default/post-baseof.html /layouts/_default/baseof.html /themes/&amp;lt;THEME&amp;gt;/layouts/_default/baseof.html  Variables are denoted by capitalized text set within &amp;lt;&amp;gt;. Note that Hugo&amp;rsquo;s default behavior is for type to inherit from section unless otherwise specified.</description>
    </item>
    
    <item>
      <title>Customizing a Theme</title>
      <link>https://gohugo.io/themes/customizing/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/themes/customizing/</guid>
      <description>The following are key concepts for Hugo site customization with themes. Hugo permits you to supplement or override any theme template or static file with files in your working directory.
 When you use a theme cloned from its git repository, do not edit the theme&amp;rsquo;s files directly. Instead, theme customization in Hugo is a matter of overriding the templates made available to you in a theme. This provides the added flexibility of tweaking a theme to meet your needs while staying current with a theme&amp;rsquo;s upstream.</description>
    </item>
    
    <item>
      <title>Contribute to the Hugo Docs</title>
      <link>https://gohugo.io/contribute/documentation/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/contribute/documentation/</guid>
      <description>Create Your Fork It&amp;rsquo;s best to make changes to the Hugo docs on your local machine to check for consistent visual styling. Make sure you&amp;rsquo;ve created a fork of hugoDocs on GitHub and cloned the repository locally on your machine. For more information, you can see GitHub&amp;rsquo;s documentation on &amp;ldquo;forking&amp;rdquo; or follow along with Hugo&amp;rsquo;s development contribution guide.
You can then create a separate branch for your additions. Be sure to choose a descriptive branch name that best fits the type of content.</description>
    </item>
    
    <item>
      <title>Hugo Features</title>
      <link>https://gohugo.io/about/features/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/about/features/</guid>
      <description>General  Extremely fast build times (&amp;lt; 1 ms per page) Completely cross platform, with easy installation on macOS, Linux, Windows, and more Renders changes on the fly with LiveReload as you develop Powerful theming Host your site anywhere  Organization  Straightforward organization for your projects, including website sections Customizable URLs Support for configurable taxonomies, including categories and tags Sort content as you desire through powerful template functions Automatic table of contents generation [Dynamic menu][] creation Pretty URLs support Permalink pattern support Redirects via aliases  Content  Native Markdown and Emacs Org-Mode support, as well as other languages via external helpers (see supported formats) TOML, YAML, and JSON metadata support in front matter Customizable homepage Multiple content types Automatic and user defined content summaries Shortcodes to enable rich content inside of Markdown &amp;ldquo;Minutes to Read&amp;rdquo; functionality &amp;ldquo;Wordcount&amp;rdquo; functionality  Additional Features  Integrated Disqus comment support Integrated Google Analytics support Automatic RSS creation Support for Go, Amber, and Ace HTML templates Syntax highlighting powered by Pygments  See what&amp;rsquo;s coming next in the Hugo roadmap.</description>
    </item>
    
    <item>
      <title>Page Variables</title>
      <link>https://gohugo.io/variables/page/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/variables/page/</guid>
      <description>The following is a list of page-level variables. Many of these will be defined in the front matter, derived from file location, or extracted from the content itself.
 See .Scratch for page-scoped, writable variables.
  Page Variables  .AlternativeOutputFormats contains all alternative formats for a given page; this variable is especially useful link rel list in your site&amp;rsquo;s &amp;lt;head&amp;gt;. (See Output Formats.) .Content the content itself, defined below the front matter.</description>
    </item>
    
    <item>
      <title>Syntax Highlighting</title>
      <link>https://gohugo.io/tools/syntax-highlighting/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/tools/syntax-highlighting/</guid>
      <description>Hugo can highlight source code in two different ways&amp;mdash;either pre-processed server side from your content or to defer the processing to the client side, using a JavaScript library.
Server-side For the pre-processed approach, highlighting is performed by an external Python-based program called Pygments and is triggered via an embedded Hugo shortcode (see example below). If Pygments is absent from the path, it will silently simply pass the content along without highlighting.</description>
    </item>
    
    <item>
      <title>Supported Content Formats</title>
      <link>https://gohugo.io/content-management/formats/</link>
      <pubDate>Tue, 10 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/content-management/formats/</guid>
      <description>Markdown is the main content format and comes in two flavours: The excellent Blackfriday project (name your files *.md or set markup = &amp;quot;markdown&amp;quot; in front matter) or its fork Mmark (name your files *.mmark or set markup = &amp;quot;mmark&amp;quot; in front matter), both very fast markdown engines written in Go.
For Emacs users, goorgeous provides built-in native support for Org-mode (name your files *.org or set markup = &amp;quot;org&amp;quot; in front matter)</description>
    </item>
    
    <item>
      <title>Lists of Content in Hugo</title>
      <link>https://gohugo.io/templates/lists/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/templates/lists/</guid>
      <description>What is a List Page Template? A list page template is a template used to render multiple pieces of content in a single HTML page. The exception to this rule is the homepage, which is still a list but has its own dedicated template.
Hugo uses the term list in its truest sense; i.e. a sequential arrangement of material, especially in alphabetical or numerical order. Hugo uses list templates on any output HTML page where content is traditionally listed:</description>
    </item>
    
    <item>
      <title>Starter Kits</title>
      <link>https://gohugo.io/tools/starter-kits/</link>
      <pubDate>Wed, 22 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/tools/starter-kits/</guid>
      <description>Know of a Hugo-related starter kit that isn&amp;rsquo;t mentioned here? Please add it to the list.
 The following starter kits are developed by active members of the Hugo community. If you find yourself having issues with any of the projects, it&amp;rsquo;s best to file an issue directly with the project&amp;rsquo;s maintainer(s).
   Victor Hugo. Victor Hugo is a Hugo boilerplate for creating truly epic websites using Gulp + Webpack as an asset pipeline.</description>
    </item>
    
    <item>
      <title>Creating a Theme</title>
      <link>https://gohugo.io/themes/creating/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/themes/creating/</guid>
      <description>If you&amp;rsquo;re creating a theme with plans to share it with the community, use relative URLs since users of your theme may not publish from the root of their website. See relURL and absURL.
  Hugo can initialize a new blank theme directory within your existing themes using the hugo new command:
hugo new theme [name]  Theme Components A theme consists of templates and static assets such as javascript and css files.</description>
    </item>
    
    <item>
      <title>Homepage Template</title>
      <link>https://gohugo.io/templates/homepage/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/templates/homepage/</guid>
      <description>Homepage is a Page and therefore has all the page variables and site variables available for use.
 The homepage template is the only required template for building a site and therefore useful when bootstrapping a new site and template. It is also the only required template if you are developing a single-page website.
  Homepage Template Lookup Order The lookup order for the homepage template is as follows:</description>
    </item>
    
    <item>
      <title>Taxonomy Variables</title>
      <link>https://gohugo.io/variables/taxonomy/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/variables/taxonomy/</guid>
      <description>Taxonomy Terms Page Variables Taxonomy terms pages are of the type Page and have the following additional variables.
For example, the following fields would be available in layouts/_defaults/terms.html, depending on how you organize your taxonomy templates:
 .Data.Singular The singular name of the taxonomy (e.g., tags =&amp;gt;tag`) .Data.Plural The plural name of the taxonomy (e.g., tags =&amp;gt; tags) .Data.Pages The list of pages in the taxonomy .Data.Terms The taxonomy itself .</description>
    </item>
    
    <item>
      <title>The Benefits of Static Site Generators</title>
      <link>https://gohugo.io/about/benefits/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/about/benefits/</guid>
      <description>The purpose of website generators is to render content into HTML files. Most are &amp;ldquo;dynamic site generators.&amp;rdquo; That means the HTTP server&amp;mdash;i.e., the program that sends files to the browser to be viewed&amp;mdash;runs the generator to create a new HTML file every time an end user requests a page.
Over time, dynamic site generators were programmed to cache their HTML files to prevent unnecessary delays in delivering pages to end users.</description>
    </item>
    
    <item>
      <title>Add Your Hugo Theme to the Showcase</title>
      <link>https://gohugo.io/contribute/themes/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/contribute/themes/</guid>
      <description>A collection of all themes created by the Hugo community, including screenshots and demos, can be found at https://themes.gohugo.io. Every theme in this list will automatically be added to the theme site. Theme updates aren&amp;rsquo;t scheduled but usually happen at least once a week.
tl;dr  Create your theme using hugo new theme &amp;lt;THEMENAME&amp;gt;; Test your theme against https://github.com/spf13/HugoBasicExample * Add a theme.toml file to the root of the theme with all required metadata Add a descriptive README.</description>
    </item>
    
    <item>
      <title>Front Matter</title>
      <link>https://gohugo.io/content-management/front-matter/</link>
      <pubDate>Mon, 09 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/content-management/front-matter/</guid>
      <description>Front matter allows you to keep metadata attached to an instance of a content type&amp;mdash;i.e., embedded inside a content file&amp;mdash;and is one of the many features that gives Hugo its strength.
Front Matter Formats Hugo supports three formats for front matter, each with their own identifying tokens.
 TOML identified by opening and closing +++. YAML identified by opening and closing ---. JSON a single JSON object surrounded by &amp;lsquo;{&amp;rsquo; and &amp;lsquo;}&amp;rsquo;, followed by a new line.</description>
    </item>
    
    <item>
      <title>Install Hugo</title>
      <link>https://gohugo.io/getting-started/installing/</link>
      <pubDate>Tue, 01 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/getting-started/installing/</guid>
      <description>There is lots of talk about &amp;ldquo;Hugo being written in Go&amp;rdquo;, but you don&amp;rsquo;t need to install Go to enjoy Hugo. Just grab a precompiled binary!
  Hugo is written in Go with support for multiple platforms. The latest release can be found at Hugo Releases.
Hugo currently provides pre-built binaries for the following:
  macOS (Darwin) for x64, i386, and ARM architectures  Windows  Linux  FreeBSD  Hugo may also be compiled from source wherever the Go compiler tool chain can run; e.</description>
    </item>
    
    <item>
      <title>Press and Articles</title>
      <link>https://gohugo.io/news/press-and-articles/</link>
      <pubDate>Mon, 01 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/news/press-and-articles/</guid>
      <description>Know of a post, article, or tutorial on Hugo? Please add it to this list.
  Hugo has been featured in the following Blog Posts, Press, and Media.
  Title Author Date     A visit to the Workshop: Hugo/Unix/Vim integration fREW Schmidt 2017-07-22   Hugo Easy Gallery - Automagical PhotoSwipe image gallery with a one-line shortcode Li-Wen Yip 2017-03-25   Automagical Image Gallery in Hugo with PhotoSwipe and jQuery Li-Wen Yip 2017-03-04   Adding Isso Comments to Hugo Stíobhart Matulevicz 2017-02-24   Hugo Tutorial: How to Build &amp;amp; Host a (Very Fast) Static E-Commerce Site Snipcart 2017-02-23   How to Password Protect a Hugo Site Aerobatic 2017-02-19   Switching from Wordpress to Hugo Mario Martelli 2017-02-19   Zero to HTTP/2 with AWS and Hugo Josh Habdas 2017-02-16   Deploy a Hugo site to Aerobatic with CircleCI Aerobatic 2017-02-14   NPM scripts for building and deploying Hugo site Aerobatic 2017-02-12   Getting started with Hugo and the plain-blog theme, on NearlyFreeSpeech.</description>
    </item>
    
    <item>
      <title>Hosting on GitHub</title>
      <link>https://gohugo.io/hosting-and-deployment/hosting-on-github/</link>
      <pubDate>Fri, 21 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/hosting-and-deployment/hosting-on-github/</guid>
      <description>GitHub provides free and fast static hosting over SSL for personal, organization, or project pages directly from a GitHub repository via its GitHub Pages service.
Assumptions  You have Git 2.5 or greater installed on your machine. You have a GitHub account. Signing up for GitHub is free. You have a ready-to-publish Hugo website or have at least completed the Quick Start.  If you are working within an Organization account or want to set up a User website on GitHub and would like more information, refer to the GitHub Pages documentation.</description>
    </item>
    
    <item>
      <title>Shortcodes</title>
      <link>https://gohugo.io/content-management/shortcodes/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/content-management/shortcodes/</guid>
      <description>What a Shortcode is Hugo loves Markdown because of its simple content format, but there are times when Markdown falls short. Often, content authors are forced to add raw HTML (e.g., video &amp;lt;iframes&amp;gt;) to Markdown content. We think this contradicts the beautiful simplicity of Markdown&amp;rsquo;s syntax.
Hugo created shortcodes to circumvent these limitations.
A shortcode is a simple snippet inside a content file that Hugo will render using a predefined template.</description>
    </item>
    
    <item>
      <title>Basic Usage</title>
      <link>https://gohugo.io/getting-started/usage/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/getting-started/usage/</guid>
      <description>The following is a description of the most command commands you will use while developing your Hugo project. See the Command Line Reference for a comprehensive view of Hugo&amp;rsquo;s CLI.
Test Installation Once you have installed Hugo, make sure it is in your PATH. You can test that Hugo has been installed correctly via the help command:
hugo help  The output you see in your console should be similar to the following:</description>
    </item>
    
    <item>
      <title>File Variables</title>
      <link>https://gohugo.io/variables/files/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/variables/files/</guid>
      <description>For information on creating shortcodes and templates that tap into Hugo&amp;rsquo;s file-related feature set, see Local File Templates.
  The .File object contains the following fields:
 .File.Path the original relative path of the page (e.g., content/posts/foo.en.md) .File.LogicalName the name of the content file that represents a page (e.g., foo.en.md) .File.TranslationBaseName the filename without extension or optional language identifier (e.g., foo) .File.BaseFileName the filename without extension (e.g., foo.en) .</description>
    </item>
    
    <item>
      <title>Frontend Interfaces with Hugo</title>
      <link>https://gohugo.io/tools/frontends/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/tools/frontends/</guid>
      <description>enwrite. Enwrite enables evernote-powered, statically generated blogs and websites. Now posting to your blog or updating your website is as easy as writing a new note in Evernote! caddy-hugo. caddy-hugo is an add-on for Caddy that delivers a good UI to edit the content of your Hugo website. Lipi. Lipi is a native GUI frontend written in Java to manage your Hugo websites.  Commercial Services  Appernetic.io is a Hugo Static Site Generator as a Service that is easy to use for non-technical users.</description>
    </item>
    
    <item>
      <title>Section Page Templates</title>
      <link>https://gohugo.io/templates/section-templates/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/templates/section-templates/</guid>
      <description>Add Content and Front Matter to Section Templates To effectively leverage section page templates, you should first understand Hugo&amp;rsquo;s content organization and, specifically, the purpose of _index.md for adding content and front matter to section and other list pages.
Section Template Lookup Order The lookup order for section templates is as follows:
 /layouts/section/&amp;lt;SECTION&amp;gt;.html /layouts/&amp;lt;SECTION&amp;gt;/list.html /layouts/_default/section.html /layouts/_default/list.html /themes/&amp;lt;THEME&amp;gt;/layouts/section/&amp;lt;SECTION&amp;gt;.html /themes/&amp;lt;THEME&amp;gt;/layouts/&amp;lt;SECTION&amp;gt;/list.html /themes/&amp;lt;THEME&amp;gt;/layouts/_default/section.html /themes/&amp;lt;THEME&amp;gt;/layouts/_default/list.html  .Site.GetPage with Sections Every Page in Hugo has a .</description>
    </item>
    
    <item>
      <title>Hosting on GitLab</title>
      <link>https://gohugo.io/hosting-and-deployment/hosting-on-gitlab/</link>
      <pubDate>Thu, 23 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/hosting-and-deployment/hosting-on-gitlab/</guid>
      <description>GitLab makes it incredibly easy to build, deploy, and host your Hugo website via their free GitLab Pages service, which provides native support for Hugo, as well as numerous other static site generators.
Assumptions  Working familiarity with Git for version control Completion of the Hugo Quick Start A GitLab account A Hugo website on your local machine that you are ready to publish  Create .gitlab-ci.yml cd your-hugo-site  In the root directory of your Hugo site, create a .</description>
    </item>
    
    <item>
      <title>Menu Variables</title>
      <link>https://gohugo.io/variables/menus/</link>
      <pubDate>Sun, 12 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/variables/menus/</guid>
      <description>The menu template has the following properties:
 .URL string .Name string .Menu string .Identifier string .Pre template.HTML .Post template.HTML .Weight int .Parent string .Children Menu  </description>
    </item>
    
    <item>
      <title>Hosting on Bitbucket</title>
      <link>https://gohugo.io/hosting-and-deployment/hosting-on-bitbucket/</link>
      <pubDate>Sat, 04 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/hosting-and-deployment/hosting-on-bitbucket/</guid>
      <description>You can use Bitbucket and Aerobatic to build, deploy, and host a Hugo website. Aerobatic is a static hosting service that integrates with Bitbucket and provides a free hosting tier.
Assumptions  Working familiarity with Git for version control A Bitbucket account  Install Aerobatic CLI If you haven&amp;rsquo;t previously used Aerobatic, you&amp;rsquo;ll first need to install the Command Line Interface (CLI) and create an account. For a list of all commands available, see the Aerobatic CLI docs.</description>
    </item>
    
    <item>
      <title>Editor Plug-ins for Hugo</title>
      <link>https://gohugo.io/tools/editors/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/tools/editors/</guid>
      <description>The Hugo community uses a wide range of preferred tools and has developed plug-ins for some of the most popular text editors to help automate parts of your workflow.
Sublime Text  Hugofy. Hugofy is a plugin for Sublime Text 3 to make life easier to use Hugo static site generator.  Visual Studio Code  Hugofy. Hugofy is a plugin for Visual Studio Code to &amp;ldquo;make life easier&amp;rdquo; when developing with Hugo.</description>
    </item>
    
    <item>
      <title>Roadmap</title>
      <link>https://gohugo.io/about/roadmap/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/about/roadmap/</guid>
      <description>To track Hugo&amp;rsquo;s progress, see our GitHub Milestones.
In no particular order, here are some other features currently being worked on:
 Even easier deployment to S3, SSH, GitHub, rsync. Give the hosting and deployment section a shot. Import from other website systems. There are already existing migration tools, but they don’t cover all major platforms. An interactive web-based editor (See the related forum thread) Additional themes, which are always ongoing and contributions are welcome!</description>
    </item>
    
    <item>
      <title>Content Sections</title>
      <link>https://gohugo.io/content-management/sections/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/content-management/sections/</guid>
      <description>This section is not updated with the new nested sections support in Hugo 0.24, see https://github.com/circleci/ccidemoDocs/issues/36
  Hugo believes that you organize your content with a purpose. The same structure that works to organize your source content is used to organize the rendered site (see directory structure).
Following this pattern, Hugo uses the top level of your content organization as the content section.
The following example shows a content directory structure for a website that has three sections: &amp;ldquo;authors,&amp;rdquo; &amp;ldquo;events,&amp;rdquo; and &amp;ldquo;posts&amp;rdquo;:</description>
    </item>
    
    <item>
      <title>Taxonomy Templates</title>
      <link>https://gohugo.io/templates/taxonomy-templates/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/templates/taxonomy-templates/</guid>
      <description>Hugo includes support for user-defined groupings of content called taxonomies. Taxonomies are classifications that demonstrate logical relationships between content. See Taxonomies under Content Management if you are unfamiliar with how Hugo leverages this powerful feature.
Hugo provides multiple ways to use taxonomies throughout your project templates:
 List a single content&amp;rsquo;s taxonomy terms within a single page template  Taxonomy List Templates Taxonomy list page templates are lists and therefore have all the variables and methods available to [list pages][lists].</description>
    </item>
    
    <item>
      <title>Directory Structure</title>
      <link>https://gohugo.io/getting-started/directory-structure/</link>
      <pubDate>Mon, 02 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/getting-started/directory-structure/</guid>
      <description>New Site Scaffolding Running the hugo new site generator from the command line will create a directory structure with the following elements:
. ├── archetypes ├── config.toml ├── content ├── data ├── layouts ├── static └── themes  Directory Structure Explained The following is a high-level overview of each of the directories with links to each of their respective sections with in the Hugo docs.
 archetypes You can create new content files in Hugo using the hugo new command.</description>
    </item>
    
    <item>
      <title>Hugo-specific Variables</title>
      <link>https://gohugo.io/variables/hugo/</link>
      <pubDate>Sun, 12 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/variables/hugo/</guid>
      <description>It contains the following fields:
 .Hugo.Generator &amp;lt;meta&amp;gt; tag for the version of Hugo that generated the site. .Hugo.Generator outputs a complete HTML tag; e.g. &amp;lt;meta name=&amp;quot;generator&amp;quot; content=&amp;quot;Hugo 0.18&amp;quot; /&amp;gt; .Hugo.Version the current version of the Hugo binary you are using e.g. 0.13-DEV
 .Hugo.CommitHash the git commit hash of the current Hugo binary e.g. 0e8bed9ccffba0df554728b46c5bbf6d78ae5247 .Hugo.BuildDate the compile date of the current Hugo binary formatted with RFC 3339 e.g. 2002-10-02T10:00:00-05:00</description>
    </item>
    
    <item>
      <title>Deployment with Wercker</title>
      <link>https://gohugo.io/hosting-and-deployment/deployment-with-wercker/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/hosting-and-deployment/deployment-with-wercker/</guid>
      <description>Goals By the end of this guide, you will have completed the following:
 Creating a basic Hugo project and website Version controlling your project with Git Adding your project to GitHub Automating site deployments with a free tool called Wercker Deploying your website to GitHub Pages for free hosting  Assumptions  You have a working familiarity with using Git for version control You have a GitHub account You have already created a basic Hugo project  If you do not meet these assumptions, the GitHub help section has an explanation of how to install and use git.</description>
    </item>
    
    <item>
      <title>Search for your Hugo Website</title>
      <link>https://gohugo.io/tools/search/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/tools/search/</guid>
      <description>A static website with a dynamic search function? Yes. As alternatives to embeddable scripts from Google or other search engines, you can provide your visitors a custom search by indexing your content files directly.
 Hugoidx is an experimental application to create a search index. It&amp;rsquo;s built on top of Bleve. GitHub Gist for Hugo Workflow. This gist contains a simple workflow to create a search index for your static website.</description>
    </item>
    
    <item>
      <title>Single Page Templates</title>
      <link>https://gohugo.io/templates/single-page-templates/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/templates/single-page-templates/</guid>
      <description>Single Page Template Lookup Order You can specify a content&amp;rsquo;s type and layout in a single content file&amp;rsquo;s front matter. However, you cannot specify section because this is determined based on file location (see content section).
Hugo assumes your content section and content type are the same unless you tell Hugo otherwise by providing a type directly in the front matter of a content file. This is why #1 and #3 come before #2 and #4, respectively, in the following lookup order.</description>
    </item>
    
    <item>
      <title>Content Types</title>
      <link>https://gohugo.io/content-management/types/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/content-management/types/</guid>
      <description>A content type can have a unique set of metadata (i.e., front matter) or customized template and can be created by the hugo new command via archetypes.
What is a Content Type Tumblr is a good example of a website with multiple content types. A piece of &amp;ldquo;content&amp;rdquo; could be a photo, quote, or a post, each with different sets of metadata and different visual rendering.
Assign a Content Type Hugo assumes that your site will be organized into sections and each section represents a corresponding type.</description>
    </item>
    
    <item>
      <title>Apache License</title>
      <link>https://gohugo.io/about/license/</link>
      <pubDate>Mon, 01 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/about/license/</guid>
      <description>Hugo v0.15 and later are released under the Apache 2.0 license. Earlier versions of Hugo were released under the Simple Public License.
  Version 2.0, January 2004 http://www.apache.org/licenses/LICENSE-2.0
Terms and Conditions for use, reproduction, and distribution
1. Definitions “License” shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document.
“Licensor” shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.</description>
    </item>
    
    <item>
      <title>Configuring Hugo</title>
      <link>https://gohugo.io/getting-started/configuration/</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/getting-started/configuration/</guid>
      <description>The directory structure of a Hugo website&amp;mdash;or more precisely, the source organization of files containing the website&amp;rsquo;s content and templates&amp;mdash;provides most of the configuration information that Hugo needs in order to generate a finished website.
Because of Hugo&amp;rsquo;s sensible defaults, many websites may not need a configuration file. Hugo is designed to recognize certain typical usage patterns.
Configuration Lookup Order Similar to the template lookup order, Hugo has a default set of rules for searching for a configuration file in the root of your website&amp;rsquo;s source directory as a default behavior:</description>
    </item>
    
    <item>
      <title>Git Info Variables</title>
      <link>https://gohugo.io/variables/git/</link>
      <pubDate>Sun, 12 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/variables/git/</guid>
      <description>Hugo&amp;rsquo;s Git integrations should be fairly performant but can increase your build time. This will depend on the size of your Git history.
  .GitInfo Prerequisites  The Hugo site must be in a Git-enabled directory. The Git executable must be installed and in your system PATH. The .GitInfo feature must be enabled in your Hugo project by passing --enableGitInfo flag on the command line or by setting enableGitInfo to true in your site&amp;rsquo;s configuration file.</description>
    </item>
    
    <item>
      <title>Archetypes</title>
      <link>https://gohugo.io/content-management/archetypes/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/content-management/archetypes/</guid>
      <description>This section is outdated, see https://github.com/circleci/ccidemoDocs/issues/11
  What are Archetypes? Archetypes are content files in the archetypes directory of your project that contain preconfigured front matter for your website&amp;rsquo;s content types. Archetypes facilitate consistent metadata across your website content and allow content authors to quickly generate instances of a content type via the hugo new command.
The hugo new generator for archetypes assumes your working directory is the content folder at the root of your project.</description>
    </item>
    
    <item>
      <title>Content View Templates</title>
      <link>https://gohugo.io/templates/views/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/templates/views/</guid>
      <description>These alternative content views are especially useful in list templates.
The following are common use cases for content views:
 You want content of every type to be shown on the homepage but only with limited summary views. You only want a bulleted list of your content on a taxonomy list page. Views make this very straightforward by delegating the rendering of each different type of content to the content itself.</description>
    </item>
    
    <item>
      <title>Deployment with Rysnc</title>
      <link>https://gohugo.io/hosting-and-deployment/deployment-with-rsync/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/hosting-and-deployment/deployment-with-rsync/</guid>
      <description>Assumptions  Access to your web host with SSH A functional static website built with Hugo  The spoiler is that you can deploy your entire website with a command that looks like the following:
hugo &amp;amp;&amp;amp; rsync -avz --delete public/ www-data@ftp.topologix.fr:~/www/  As you will see, we put it in a shell script file, which makes building and deployment as easy as executing ./deploy.
Install SSH Key If it is not done yet, we will make an automated way to SSH to your server.</description>
    </item>
    
    <item>
      <title>Other Hugo Community Projects</title>
      <link>https://gohugo.io/tools/other/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/tools/other/</guid>
      <description>And for all the other small things around Hugo:
 hugo-gallery lets you create an image gallery for Hugo sites. flickr-hugo-embed prints shortcodes to embed a set of images from an album on Flickr into Hugo. hugo-openapispec-shortcode A shortcode that allows you to include Open API Spec (formerly known as Swagger Spec) in a page. HugoPhotoSwipe makes it easy to create image galleries using PhotoSwipe. Hugo SFTP Upload Syncs the local build of your Hugo website with your remote webserver via SFTP.</description>
    </item>
    
    <item>
      <title>Sitemap Variables</title>
      <link>https://gohugo.io/variables/sitemap/</link>
      <pubDate>Sun, 12 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/variables/sitemap/</guid>
      <description>A sitemap is a Page and therefore has all the page variables available to use sitemap templates. They also have the following sitemap-specific variables available to them:
 .Sitemap.ChangeFreq the page change frequency .Sitemap.Priority the priority of the page .Sitemap.Filename the sitemap filename  </description>
    </item>
    
    <item>
      <title>Data Templates</title>
      <link>https://gohugo.io/templates/data-templates/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/templates/data-templates/</guid>
      <description>Hugo supports loading data from YAML, JSON, and TOML files located in the data directory in the root of your Hugo project.
The Data Folder The data folder is where you can store additional data for Hugo to use when generating your site. Data files aren&amp;rsquo;t used to generate standalone pages; rather, they&amp;rsquo;re meant to be supplemental to content files. This feature can extend the content in case your front matter fields grow out of control.</description>
    </item>
    
    <item>
      <title>Taxonomies</title>
      <link>https://gohugo.io/content-management/taxonomies/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/content-management/taxonomies/</guid>
      <description>What is a Taxonomy? Hugo includes support for user-defined groupings of content called taxonomies. Taxonomies are classifications of logical relationships between content.
Definitions  Taxonomy a categorization that can be used to classify content Term a key within the taxonomy Value a piece of content assigned to a term  Example Taxonomy: Movie Website Let&amp;rsquo;s assume you are making a website about movies. You may want to include the following taxonomies:</description>
    </item>
    
    <item>
      <title>Partial Templates</title>
      <link>https://gohugo.io/templates/partials/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/templates/partials/</guid>
      <description>Partial Template Lookup Order Partial templates&amp;mdash;like single page templates and list page templates&amp;mdash;have a specific lookup order. However, partials are simpler in that Hugo will only check in two places:
 layouts/partials/*&amp;lt;PARTIALNAME&amp;gt;.html themes/&amp;lt;THEME&amp;gt;/layouts/partials/*&amp;lt;PARTIALNAME&amp;gt;.html  This allows a theme&amp;rsquo;s end user to copy a partial&amp;rsquo;s contents into a file of the same name for further customization.
Use Partials in your Templates All partials for your Hugo project are located in a single layouts/partials directory.</description>
    </item>
    
    <item>
      <title>Content Summaries</title>
      <link>https://gohugo.io/content-management/summaries/</link>
      <pubDate>Tue, 10 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/content-management/summaries/</guid>
      <description>With the use of the .Summary page variable, Hugo generates summaries of content to use as a short version in summary views.
Summary Splitting Options  Hugo-defined Summary Split User-defined Summary Split  It is natural to accompany the summary with links to the original content, and a common design pattern is to see this link in the form of a &amp;ldquo;Read More &amp;hellip;&amp;rdquo; button. See the .RelPermalink, .Permalink, and .</description>
    </item>
    
    <item>
      <title>Cross References</title>
      <link>https://gohugo.io/content-management/cross-references/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/content-management/cross-references/</guid>
      <description>The ref and relref shortcodes link documents together, both of which are built-in Hugo shortcodes. These shortcodes are also used to provide links to headings inside of your content, whether across documents or within a document. The only difference between ref and relref is whether the resulting URL is absolute (http://1.com/about/) or relative (/about/), respectively.
Use ref and relref {{&amp;lt; ref &amp;quot;document&amp;quot; &amp;gt;}} {{&amp;lt; ref &amp;quot;#anchor&amp;quot; &amp;gt;}} {{&amp;lt; ref &amp;quot;document#anchor&amp;quot; &amp;gt;}} {{&amp;lt; relref &amp;quot;document&amp;quot; &amp;gt;}} {{&amp;lt; relref &amp;quot;#anchor&amp;quot; &amp;gt;}} {{&amp;lt; relref &amp;quot;document#anchor&amp;quot; &amp;gt;}}  The single parameter to ref is a string with a content documentname (e.</description>
    </item>
    
    <item>
      <title>Creating Your Own Shortcodes</title>
      <link>https://gohugo.io/templates/shortcode-templates/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/templates/shortcode-templates/</guid>
      <description>Shortcodes are a means to consolidate templating into small, reusable snippets that you can embed directly inside of your content. In this sense, you can think of shortcodes as the intermediary between page and list templates and basic content files.
 Hugo also ships with built-in shortcodes for common use cases. (See Content Management: Shortcodes.)
  Create Custom Shortcodes Hugo&amp;rsquo;s built-in shortcodes cover many common, but not all, use cases.</description>
    </item>
    
    <item>
      <title>Local File Templates</title>
      <link>https://gohugo.io/templates/files/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/templates/files/</guid>
      <description>Traverse Local Files With Hugo&amp;rsquo;s readDir and readFile template functions, you can traverse your website&amp;rsquo;s files on your server.
Use readDir The readDir function returns an array of os.FileInfo. It takes the file&amp;rsquo;s path as a single string argument. This path can be to any directory of your website (i.e., as found on your server&amp;rsquo;s file system).
Whether the path is absolute or relative does not matter because&amp;mdash;at least for readDir&amp;mdash;the root of your website (typically .</description>
    </item>
    
    <item>
      <title>URL Management</title>
      <link>https://gohugo.io/content-management/urls/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/content-management/urls/</guid>
      <description>Permalinks The default Hugo target directory for your built website is public/. However, you can change this value by specifying a different publishDir in your site configuration. The directories created at build time for a section reflect the position of the content&amp;rsquo;s directory within the content folder and namespace matching its layout within the contentdir hierarchy.
The permalinks option in your site configuration allows you to adjust the directory paths (i.</description>
    </item>
    
    <item>
      <title>Custom 404 Page</title>
      <link>https://gohugo.io/templates/404/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/templates/404/</guid>
      <description>When using Hugo with GitHub Pages, you can provide your own template for a custom 404 error page by creating a 404.html template file in your /layouts folder. When Hugo generates your site, the 404.html file will be placed in the root.
404 pages will have all the regular page variables available to use in the templates.
In addition to the standard page variables, the 404 page has access to all site content accessible from .</description>
    </item>
    
    <item>
      <title>Menus</title>
      <link>https://gohugo.io/content-management/menus/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/content-management/menus/</guid>
      <description>If all you want is a simple menu for your sections, see the &amp;ldquo;Section Menu for Lazy Bloggers&amp;rdquo; in Menu Templates.
  You can do this:
 Place content in one or many menus Handle nested menus with unlimited depth Create menu entries without being attached to any content Distinguish active element (and active branch)  What is a Menu in Hugo? A menu is a named array of menu entries accessible by name via the .</description>
    </item>
    
    <item>
      <title>Menu Templates</title>
      <link>https://gohugo.io/templates/menu-templates/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/templates/menu-templates/</guid>
      <description>Hugo makes no assumptions about how your rendered HTML will be structured. Instead, it provides all of the functions you will need to be able to build your menu however you want.
The following is an example:
layouts/partials/sidebar.html  &amp;lt;!-- sidebar start --&amp;gt; &amp;lt;aside&amp;gt; &amp;lt;div id=&amp;quot;sidebar&amp;quot; class=&amp;quot;nav-collapse&amp;quot;&amp;gt; &amp;lt;!-- sidebar menu start--&amp;gt; &amp;lt;ul class=&amp;quot;sidebar-menu&amp;quot;&amp;gt; {{ $currentPage := . }} {{ range .Site.Menus.main }} {{ if .HasChildren }} &amp;lt;li class=&amp;quot;sub-menu{{if $currentPage.HasMenuCurrent &amp;quot;main&amp;quot; .</description>
    </item>
    
    <item>
      <title>Table of Contents</title>
      <link>https://gohugo.io/content-management/toc/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/content-management/toc/</guid>
      <description>Currently, the {{.TableOfContents}} page variable does not allow you to specify which heading levels you want the TOC to render. See the related GitHub discussion (#1778). As such, the resulting &amp;lt;nav id=&amp;quot;TableOfContents&amp;quot;&amp;gt;&amp;lt;ul&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/nav&amp;gt; is going to start at &amp;lt;h1&amp;gt; when pulling from {{.Content}}.
  Usage Create your markdown the way you normally would with the appropriate headings. Here is some example content:
&amp;lt;!-- Your front matter up here --&amp;gt; ## Introduction One morning, when Gregor Samsa woke from troubled dreams, he found himself transformed in his bed into a horrible vermin.</description>
    </item>
    
    <item>
      <title>Comments</title>
      <link>https://gohugo.io/content-management/comments/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/content-management/comments/</guid>
      <description>Hugo ships with support for Disqus, a third-party service that provides comment and community capabilities to websites via JavaScript.
Your theme may already support Disqus, but if not, it is easy to add to your templates via [Hugo&amp;rsquo;s built-in Disqus partial][disquspartial].
Add Disqus Hugo comes with all the code you need to load Disqus into your templates. Before adding Disqus to your site, you&amp;rsquo;ll need to set up an account.</description>
    </item>
    
    <item>
      <title>Pagination</title>
      <link>https://gohugo.io/templates/pagination/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/templates/pagination/</guid>
      <description>The real power of Hugo pagination shines when combined with the where function and its SQL-like operators: first, last, and after. You can even order the content the way you&amp;rsquo;ve become used to with Hugo.
Configure Pagination Pagination can be configured in your site configuration:
 Paginate default = 10. This setting can be overridden within the template. PaginatePath default = page. Allows you to set a different path for your pagination pages.</description>
    </item>
    
    <item>
      <title>RSS Templates</title>
      <link>https://gohugo.io/templates/rss/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/templates/rss/</guid>
      <description>RSS Template Lookup Order You can use a single RSS template to generate all of your RSS feeds or create a specific template for each individual feed.
 /layouts/section/&amp;lt;section&amp;gt;.rss.xml /layouts/_default/rss.xml /themes/&amp;lt;theme&amp;gt;/layouts/section/&amp;lt;section&amp;gt;.rss.xml /themes/&amp;lt;theme&amp;gt;/layouts/_default/rss.xml   Hugo ships with its own RSS 2.0 template. The embedded template will be sufficient for most use cases.
  RSS pages are of the type Page and have all the page variables available to use in the templates.</description>
    </item>
    
    <item>
      <title>Multilingual Mode</title>
      <link>https://gohugo.io/content-management/multilingual/</link>
      <pubDate>Tue, 10 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/content-management/multilingual/</guid>
      <description>You should define the available languages in a Languages section in your site configuration.
Configure Languages The following is an example of a TOML site configuration for a multilingual Hugo project:
config.toml  DefaultContentLanguage = &amp;quot;en&amp;quot; copyright = &amp;quot;Everything is mine&amp;quot; [params.navigation] help = &amp;quot;Help&amp;quot; [Languages] [Languages.en] title = &amp;quot;My blog&amp;quot; weight = 1 [Languages.en.params] linkedin = &amp;quot;english-link&amp;quot; [Languages.fr] copyright = &amp;quot;Tout est à moi&amp;quot; title = &amp;quot;Mon blog&amp;quot; weight = 2 [Languages.</description>
    </item>
    
    <item>
      <title>Sitemap Template</title>
      <link>https://gohugo.io/templates/sitemap-template/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/templates/sitemap-template/</guid>
      <description>A single Sitemap template is used to generate the sitemap.xml file. Hugo automatically comes with this template file. No work is needed on the users&amp;rsquo; part unless they want to customize sitemap.xml.
A sitemap is a Page and therefore has all the page variables available to use in this template along with Sitemap-specific ones:
 .Sitemap.ChangeFreq The page change frequency .Sitemap.Priority The priority of the page .Sitemap.Filename The sitemap filename  If provided, Hugo will use /layouts/sitemap.</description>
    </item>
    
    <item>
      <title>Robots.txt File</title>
      <link>https://gohugo.io/templates/robots/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/templates/robots/</guid>
      <description>To create your robots.txt as a template, first set the enableRobotsTXT value to true in your configuration file. By default, this option generates a robots.txt with the following content, which tells search engines that they are allowed to crawl everything:
User-agent: *  Robots.txt Template Lookup Order The lookup order for the robots.txt template is as follows:
 /layouts/robots.txt /themes/&amp;lt;THEME&amp;gt;/layout/robots.txt   If you do not want Hugo to create a default robots.</description>
    </item>
    
    <item>
      <title>Internal Templates</title>
      <link>https://gohugo.io/templates/internal/</link>
      <pubDate>Mon, 06 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/templates/internal/</guid>
      <description>While the following internal templates are called similar to partials, they do not observe the partial template lookup order.
  Google Analytics Hugo ships with internal templates for Google Analytics tracking, including both synchronous and asynchronous tracking codes.
Configure Google Analytics Provide your tracking id in your configuration file:
googleAnalytics = &amp;quot;UA-123-45&amp;quot;  googleAnalytics: &amp;quot;UA-123-45&amp;quot;  Use the Google Analytics Template You can then include the Google Analytics internal template:</description>
    </item>
    
    <item>
      <title>Alternative Templating Languages</title>
      <link>https://gohugo.io/templates/alternatives/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/templates/alternatives/</guid>
      <description>Ace Templates For template documentation, follow the links from the Ace project.
 Ace templates must be named with the ace-suffix; e.g., list.ace It&amp;rsquo;s possible to use both Go templates and Ace templates side by side and even include one into the other Full Go template syntax support, including all the useful helper template functions Partials can be included both with the Ace and the Go template syntax. For example, the following two will have the same output in Ace:  = include partials/foo.</description>
    </item>
    
    <item>
      <title>Template Debugging</title>
      <link>https://gohugo.io/templates/template-debugging/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/templates/template-debugging/</guid>
      <description>Here are some snippets you can add to your template to answer some common questions.
These snippets use the printf function available in all Go templates. This function is an alias to the Go function, fmt.Printf.
What Variables are Available in this Context? You can use the template syntax, $., to get the top-level template context from anywhere in your template. This will print out all the values under, .</description>
    </item>
    
    <item>
      <title>hugo</title>
      <link>https://gohugo.io/commands/hugo/</link>
      <pubDate>Sun, 16 Jul 2017 23:23:14 +0200</pubDate>
      
      <guid>https://gohugo.io/commands/hugo/</guid>
      <description>hugo hugo builds your site
Synopsis hugo is the main command, used to build your Hugo site.
Hugo is a Fast and Flexible Static Site Generator built with love by spf13 and friends in Go.
Complete documentation is available at http://gohugo.io/.
hugo [flags]  Options  -b, --baseURL string hostname (and path) to the root, e.g. http://spf13.com/ -D, --buildDrafts include content marked as draft -E, --buildExpired include expired content -F, --buildFuture include content with publishdate in the future --cacheDir string filesystem path to cache directory.</description>
    </item>
    
    <item>
      <title>hugo benchmark</title>
      <link>https://gohugo.io/commands/hugo_benchmark/</link>
      <pubDate>Sun, 16 Jul 2017 23:23:14 +0200</pubDate>
      
      <guid>https://gohugo.io/commands/hugo_benchmark/</guid>
      <description>hugo benchmark Benchmark Hugo by building a site a number of times.
Synopsis Hugo can build a site many times over and analyze the running process creating a benchmark.
hugo benchmark [flags]  Options  -b, --baseURL string hostname (and path) to the root, e.g. http://spf13.com/ -D, --buildDrafts include content marked as draft -E, --buildExpired include expired content -F, --buildFuture include content with publishdate in the future --cacheDir string filesystem path to cache directory.</description>
    </item>
    
    <item>
      <title>hugo check</title>
      <link>https://gohugo.io/commands/hugo_check/</link>
      <pubDate>Sun, 16 Jul 2017 23:23:14 +0200</pubDate>
      
      <guid>https://gohugo.io/commands/hugo_check/</guid>
      <description> hugo check Contains some verification checks
Synopsis Contains some verification checks
Options  -h, --help help for check  Options inherited from parent commands  --config string config file (default is path/config.yaml|json|toml) --log enable Logging --logFile string log File path (if set, logging enabled automatically) --quiet build in quiet mode -v, --verbose verbose output --verboseLog verbose logging  SEE ALSO  hugo - hugo builds your site hugo check ulimit - Check system ulimit settings  Auto generated by spf13/cobra on 16-Jul-2017 </description>
    </item>
    
    <item>
      <title>hugo check ulimit</title>
      <link>https://gohugo.io/commands/hugo_check_ulimit/</link>
      <pubDate>Sun, 16 Jul 2017 23:23:14 +0200</pubDate>
      
      <guid>https://gohugo.io/commands/hugo_check_ulimit/</guid>
      <description> hugo check ulimit Check system ulimit settings
Synopsis Hugo will inspect the current ulimit settings on the system. This is primarily to ensure that Hugo can watch enough files on some OSs
hugo check ulimit [flags]  Options  -h, --help help for ulimit  Options inherited from parent commands  --config string config file (default is path/config.yaml|json|toml) --log enable Logging --logFile string log File path (if set, logging enabled automatically) --quiet build in quiet mode -v, --verbose verbose output --verboseLog verbose logging  SEE ALSO  hugo check - Contains some verification checks  Auto generated by spf13/cobra on 16-Jul-2017 </description>
    </item>
    
    <item>
      <title>hugo config</title>
      <link>https://gohugo.io/commands/hugo_config/</link>
      <pubDate>Sun, 16 Jul 2017 23:23:14 +0200</pubDate>
      
      <guid>https://gohugo.io/commands/hugo_config/</guid>
      <description> hugo config Print the site configuration
Synopsis Print the site configuration, both default and custom settings.
hugo config [flags]  Options  -h, --help help for config  Options inherited from parent commands  --config string config file (default is path/config.yaml|json|toml) --log enable Logging --logFile string log File path (if set, logging enabled automatically) --quiet build in quiet mode -v, --verbose verbose output --verboseLog verbose logging  SEE ALSO  hugo - hugo builds your site  Auto generated by spf13/cobra on 16-Jul-2017 </description>
    </item>
    
    <item>
      <title>hugo convert</title>
      <link>https://gohugo.io/commands/hugo_convert/</link>
      <pubDate>Sun, 16 Jul 2017 23:23:14 +0200</pubDate>
      
      <guid>https://gohugo.io/commands/hugo_convert/</guid>
      <description>hugo convert Convert your content to different formats
Synopsis Convert your content (e.g. front matter) to different formats.
See convert&amp;rsquo;s subcommands toJSON, toTOML and toYAML for more information.
Options  -h, --help help for convert -o, --output string filesystem path to write files to -s, --source string filesystem path to read files relative from --unsafe enable less safe operations, please backup first  Options inherited from parent commands  --config string config file (default is path/config.</description>
    </item>
    
    <item>
      <title>hugo convert toJSON</title>
      <link>https://gohugo.io/commands/hugo_convert_tojson/</link>
      <pubDate>Sun, 16 Jul 2017 23:23:14 +0200</pubDate>
      
      <guid>https://gohugo.io/commands/hugo_convert_tojson/</guid>
      <description> hugo convert toJSON Convert front matter to JSON
Synopsis toJSON converts all front matter in the content directory to use JSON for the front matter.
hugo convert toJSON [flags]  Options  -h, --help help for toJSON  Options inherited from parent commands  --config string config file (default is path/config.yaml|json|toml) --log enable Logging --logFile string log File path (if set, logging enabled automatically) -o, --output string filesystem path to write files to --quiet build in quiet mode -s, --source string filesystem path to read files relative from --unsafe enable less safe operations, please backup first -v, --verbose verbose output --verboseLog verbose logging  SEE ALSO  hugo convert - Convert your content to different formats  Auto generated by spf13/cobra on 16-Jul-2017 </description>
    </item>
    
    <item>
      <title>hugo convert toTOML</title>
      <link>https://gohugo.io/commands/hugo_convert_totoml/</link>
      <pubDate>Sun, 16 Jul 2017 23:23:14 +0200</pubDate>
      
      <guid>https://gohugo.io/commands/hugo_convert_totoml/</guid>
      <description> hugo convert toTOML Convert front matter to TOML
Synopsis toTOML converts all front matter in the content directory to use TOML for the front matter.
hugo convert toTOML [flags]  Options  -h, --help help for toTOML  Options inherited from parent commands  --config string config file (default is path/config.yaml|json|toml) --log enable Logging --logFile string log File path (if set, logging enabled automatically) -o, --output string filesystem path to write files to --quiet build in quiet mode -s, --source string filesystem path to read files relative from --unsafe enable less safe operations, please backup first -v, --verbose verbose output --verboseLog verbose logging  SEE ALSO  hugo convert - Convert your content to different formats  Auto generated by spf13/cobra on 16-Jul-2017 </description>
    </item>
    
    <item>
      <title>hugo convert toYAML</title>
      <link>https://gohugo.io/commands/hugo_convert_toyaml/</link>
      <pubDate>Sun, 16 Jul 2017 23:23:14 +0200</pubDate>
      
      <guid>https://gohugo.io/commands/hugo_convert_toyaml/</guid>
      <description> hugo convert toYAML Convert front matter to YAML
Synopsis toYAML converts all front matter in the content directory to use YAML for the front matter.
hugo convert toYAML [flags]  Options  -h, --help help for toYAML  Options inherited from parent commands  --config string config file (default is path/config.yaml|json|toml) --log enable Logging --logFile string log File path (if set, logging enabled automatically) -o, --output string filesystem path to write files to --quiet build in quiet mode -s, --source string filesystem path to read files relative from --unsafe enable less safe operations, please backup first -v, --verbose verbose output --verboseLog verbose logging  SEE ALSO  hugo convert - Convert your content to different formats  Auto generated by spf13/cobra on 16-Jul-2017 </description>
    </item>
    
    <item>
      <title>hugo env</title>
      <link>https://gohugo.io/commands/hugo_env/</link>
      <pubDate>Sun, 16 Jul 2017 23:23:14 +0200</pubDate>
      
      <guid>https://gohugo.io/commands/hugo_env/</guid>
      <description> hugo env Print Hugo version and environment info
Synopsis Print Hugo version and environment info. This is useful in Hugo bug reports.
hugo env [flags]  Options  -h, --help help for env  Options inherited from parent commands  --config string config file (default is path/config.yaml|json|toml) --log enable Logging --logFile string log File path (if set, logging enabled automatically) --quiet build in quiet mode -v, --verbose verbose output --verboseLog verbose logging  SEE ALSO  hugo - hugo builds your site  Auto generated by spf13/cobra on 16-Jul-2017 </description>
    </item>
    
    <item>
      <title>hugo gen</title>
      <link>https://gohugo.io/commands/hugo_gen/</link>
      <pubDate>Sun, 16 Jul 2017 23:23:14 +0200</pubDate>
      
      <guid>https://gohugo.io/commands/hugo_gen/</guid>
      <description>hugo gen A collection of several useful generators.
Synopsis A collection of several useful generators.
Options  -h, --help help for gen  Options inherited from parent commands  --config string config file (default is path/config.yaml|json|toml) --log enable Logging --logFile string log File path (if set, logging enabled automatically) --quiet build in quiet mode -v, --verbose verbose output --verboseLog verbose logging  SEE ALSO  hugo - hugo builds your site hugo gen autocomplete - Generate shell autocompletion script for Hugo hugo gen doc - Generate Markdown documentation for the Hugo CLI.</description>
    </item>
    
    <item>
      <title>hugo gen autocomplete</title>
      <link>https://gohugo.io/commands/hugo_gen_autocomplete/</link>
      <pubDate>Sun, 16 Jul 2017 23:23:14 +0200</pubDate>
      
      <guid>https://gohugo.io/commands/hugo_gen_autocomplete/</guid>
      <description>hugo gen autocomplete Generate shell autocompletion script for Hugo
Synopsis Generates a shell autocompletion script for Hugo.
NOTE: The current version supports Bash only. This should work for *nix systems with Bash installed.
By default, the file is written directly to /etc/bash_completion.d for convenience, and the command may need superuser rights, e.g.:
$ sudo hugo gen autocomplete  Add --completionfile=/path/to/file flag to set alternative file-path and name.
Logout and in again to reload the completion scripts, or just source them in directly:</description>
    </item>
    
    <item>
      <title>hugo gen doc</title>
      <link>https://gohugo.io/commands/hugo_gen_doc/</link>
      <pubDate>Sun, 16 Jul 2017 23:23:14 +0200</pubDate>
      
      <guid>https://gohugo.io/commands/hugo_gen_doc/</guid>
      <description>hugo gen doc Generate Markdown documentation for the Hugo CLI.
Synopsis Generate Markdown documentation for the Hugo CLI.
This command is, mostly, used to create up-to-date documentation of Hugo&amp;rsquo;s command-line interface for http://gohugo.io/.
It creates one Markdown file per command with front matter suitable for rendering in Hugo.
hugo gen doc [flags]  Options  --dir string the directory to write the doc. (default &amp;quot;/tmp/hugodoc/&amp;quot;) -h, --help help for doc  Options inherited from parent commands  --config string config file (default is path/config.</description>
    </item>
    
    <item>
      <title>hugo gen man</title>
      <link>https://gohugo.io/commands/hugo_gen_man/</link>
      <pubDate>Sun, 16 Jul 2017 23:23:14 +0200</pubDate>
      
      <guid>https://gohugo.io/commands/hugo_gen_man/</guid>
      <description>hugo gen man Generate man pages for the Hugo CLI
Synopsis This command automatically generates up-to-date man pages of Hugo&amp;rsquo;s command-line interface. By default, it creates the man page files in the &amp;ldquo;man&amp;rdquo; directory under the current directory.
hugo gen man [flags]  Options  --dir string the directory to write the man pages. (default &amp;quot;man/&amp;quot;) -h, --help help for man  Options inherited from parent commands  --config string config file (default is path/config.</description>
    </item>
    
    <item>
      <title>hugo import</title>
      <link>https://gohugo.io/commands/hugo_import/</link>
      <pubDate>Sun, 16 Jul 2017 23:23:14 +0200</pubDate>
      
      <guid>https://gohugo.io/commands/hugo_import/</guid>
      <description> hugo import Import your site from others.
Synopsis Import your site from other web site generators like Jekyll.
Import requires a subcommand, e.g. hugo import jekyll jekyll_root_path target_path.
Options  -h, --help help for import  Options inherited from parent commands  --config string config file (default is path/config.yaml|json|toml) --log enable Logging --logFile string log File path (if set, logging enabled automatically) --quiet build in quiet mode -v, --verbose verbose output --verboseLog verbose logging  SEE ALSO  hugo - hugo builds your site hugo import jekyll - hugo import from Jekyll  Auto generated by spf13/cobra on 16-Jul-2017 </description>
    </item>
    
    <item>
      <title>hugo import jekyll</title>
      <link>https://gohugo.io/commands/hugo_import_jekyll/</link>
      <pubDate>Sun, 16 Jul 2017 23:23:14 +0200</pubDate>
      
      <guid>https://gohugo.io/commands/hugo_import_jekyll/</guid>
      <description>hugo import jekyll hugo import from Jekyll
Synopsis hugo import from Jekyll.
Import from Jekyll requires two paths, e.g. hugo import jekyll jekyll_root_path target_path.
hugo import jekyll [flags]  Options  --force allow import into non-empty target directory -h, --help help for jekyll  Options inherited from parent commands  --config string config file (default is path/config.yaml|json|toml) --log enable Logging --logFile string log File path (if set, logging enabled automatically) --quiet build in quiet mode -v, --verbose verbose output --verboseLog verbose logging  SEE ALSO  hugo import - Import your site from others.</description>
    </item>
    
    <item>
      <title>hugo list</title>
      <link>https://gohugo.io/commands/hugo_list/</link>
      <pubDate>Sun, 16 Jul 2017 23:23:14 +0200</pubDate>
      
      <guid>https://gohugo.io/commands/hugo_list/</guid>
      <description> hugo list Listing out various types of content
Synopsis Listing out various types of content.
List requires a subcommand, e.g. hugo list drafts.
Options  -h, --help help for list -s, --source string filesystem path to read files relative from  Options inherited from parent commands  --config string config file (default is path/config.yaml|json|toml) --log enable Logging --logFile string log File path (if set, logging enabled automatically) --quiet build in quiet mode -v, --verbose verbose output --verboseLog verbose logging  SEE ALSO  hugo - hugo builds your site hugo list drafts - List all drafts hugo list expired - List all posts already expired hugo list future - List all posts dated in the future  Auto generated by spf13/cobra on 16-Jul-2017 </description>
    </item>
    
    <item>
      <title>hugo list drafts</title>
      <link>https://gohugo.io/commands/hugo_list_drafts/</link>
      <pubDate>Sun, 16 Jul 2017 23:23:14 +0200</pubDate>
      
      <guid>https://gohugo.io/commands/hugo_list_drafts/</guid>
      <description> hugo list drafts List all drafts
Synopsis List all of the drafts in your content directory.
hugo list drafts [flags]  Options  -h, --help help for drafts  Options inherited from parent commands  --config string config file (default is path/config.yaml|json|toml) --log enable Logging --logFile string log File path (if set, logging enabled automatically) --quiet build in quiet mode -s, --source string filesystem path to read files relative from -v, --verbose verbose output --verboseLog verbose logging  SEE ALSO  hugo list - Listing out various types of content  Auto generated by spf13/cobra on 16-Jul-2017 </description>
    </item>
    
    <item>
      <title>hugo list expired</title>
      <link>https://gohugo.io/commands/hugo_list_expired/</link>
      <pubDate>Sun, 16 Jul 2017 23:23:14 +0200</pubDate>
      
      <guid>https://gohugo.io/commands/hugo_list_expired/</guid>
      <description> hugo list expired List all posts already expired
Synopsis List all of the posts in your content directory which has already expired.
hugo list expired [flags]  Options  -h, --help help for expired  Options inherited from parent commands  --config string config file (default is path/config.yaml|json|toml) --log enable Logging --logFile string log File path (if set, logging enabled automatically) --quiet build in quiet mode -s, --source string filesystem path to read files relative from -v, --verbose verbose output --verboseLog verbose logging  SEE ALSO  hugo list - Listing out various types of content  Auto generated by spf13/cobra on 16-Jul-2017 </description>
    </item>
    
    <item>
      <title>hugo list future</title>
      <link>https://gohugo.io/commands/hugo_list_future/</link>
      <pubDate>Sun, 16 Jul 2017 23:23:14 +0200</pubDate>
      
      <guid>https://gohugo.io/commands/hugo_list_future/</guid>
      <description> hugo list future List all posts dated in the future
Synopsis List all of the posts in your content directory which will be posted in the future.
hugo list future [flags]  Options  -h, --help help for future  Options inherited from parent commands  --config string config file (default is path/config.yaml|json|toml) --log enable Logging --logFile string log File path (if set, logging enabled automatically) --quiet build in quiet mode -s, --source string filesystem path to read files relative from -v, --verbose verbose output --verboseLog verbose logging  SEE ALSO  hugo list - Listing out various types of content  Auto generated by spf13/cobra on 16-Jul-2017 </description>
    </item>
    
    <item>
      <title>hugo new</title>
      <link>https://gohugo.io/commands/hugo_new/</link>
      <pubDate>Sun, 16 Jul 2017 23:23:14 +0200</pubDate>
      
      <guid>https://gohugo.io/commands/hugo_new/</guid>
      <description>hugo new Create new content for your site
Synopsis Create a new content file and automatically set the date and title. It will guess which kind of file to create based on the path provided.
You can also specify the kind with -k KIND.
If archetypes are provided in your theme or site, they will be used.
hugo new [path] [flags]  Options  --editor string edit new content with this editor, if provided -h, --help help for new -k, --kind string content type to create -s, --source string filesystem path to read files relative from  Options inherited from parent commands  --config string config file (default is path/config.</description>
    </item>
    
    <item>
      <title>hugo new site</title>
      <link>https://gohugo.io/commands/hugo_new_site/</link>
      <pubDate>Sun, 16 Jul 2017 23:23:14 +0200</pubDate>
      
      <guid>https://gohugo.io/commands/hugo_new_site/</guid>
      <description>hugo new site Create a new site (skeleton)
Synopsis Create a new site in the provided directory. The new site will have the correct structure, but no content or theme yet. Use hugo new [contentPath] to create new content.
hugo new site [path] [flags]  Options  --force init inside non-empty directory -f, --format string config &amp;amp; frontmatter format (default &amp;quot;toml&amp;quot;) -h, --help help for site  Options inherited from parent commands  --config string config file (default is path/config.</description>
    </item>
    
    <item>
      <title>hugo new theme</title>
      <link>https://gohugo.io/commands/hugo_new_theme/</link>
      <pubDate>Sun, 16 Jul 2017 23:23:14 +0200</pubDate>
      
      <guid>https://gohugo.io/commands/hugo_new_theme/</guid>
      <description>hugo new theme Create a new theme
Synopsis Create a new theme (skeleton) called [name] in the current directory. New theme is a skeleton. Please add content to the touched files. Add your name to the copyright line in the license and adjust the theme.toml file as you see fit.
hugo new theme [name] [flags]  Options  -h, --help help for theme  Options inherited from parent commands  --config string config file (default is path/config.</description>
    </item>
    
    <item>
      <title>hugo server</title>
      <link>https://gohugo.io/commands/hugo_server/</link>
      <pubDate>Sun, 16 Jul 2017 23:23:14 +0200</pubDate>
      
      <guid>https://gohugo.io/commands/hugo_server/</guid>
      <description>hugo server A high performance webserver
Synopsis Hugo provides its own webserver which builds and serves the site. While hugo server is high performance, it is a webserver with limited options. Many run it in production, but the standard behavior is for people to use it in development and use a more full featured server such as Nginx or Caddy.
&amp;lsquo;hugo server&amp;rsquo; will avoid writing the rendered and served content to disk, preferring to store it in memory.</description>
    </item>
    
    <item>
      <title>hugo undraft</title>
      <link>https://gohugo.io/commands/hugo_undraft/</link>
      <pubDate>Sun, 16 Jul 2017 23:23:14 +0200</pubDate>
      
      <guid>https://gohugo.io/commands/hugo_undraft/</guid>
      <description> hugo undraft Undraft resets the content&amp;rsquo;s draft status
Synopsis Undraft resets the content&amp;rsquo;s draft status and updates the date to the current date and time. If the content&amp;rsquo;s draft status is &amp;lsquo;False&amp;rsquo;, nothing is done.
hugo undraft path/to/content [flags]  Options  -h, --help help for undraft  Options inherited from parent commands  --config string config file (default is path/config.yaml|json|toml) --log enable Logging --logFile string log File path (if set, logging enabled automatically) --quiet build in quiet mode -v, --verbose verbose output --verboseLog verbose logging  SEE ALSO  hugo - hugo builds your site  Auto generated by spf13/cobra on 16-Jul-2017 </description>
    </item>
    
    <item>
      <title>hugo version</title>
      <link>https://gohugo.io/commands/hugo_version/</link>
      <pubDate>Sun, 16 Jul 2017 23:23:14 +0200</pubDate>
      
      <guid>https://gohugo.io/commands/hugo_version/</guid>
      <description> hugo version Print the version number of Hugo
Synopsis All software has versions. This is Hugo&amp;rsquo;s.
hugo version [flags]  Options  -h, --help help for version  Options inherited from parent commands  --config string config file (default is path/config.yaml|json|toml) --log enable Logging --logFile string log File path (if set, logging enabled automatically) --quiet build in quiet mode -v, --verbose verbose output --verboseLog verbose logging  SEE ALSO  hugo - hugo builds your site  Auto generated by spf13/cobra on 16-Jul-2017 </description>
    </item>
    
    <item>
      <title>July Release</title>
      <link>https://gohugo.io/news/0-25-1/</link>
      <pubDate>Mon, 10 Jul 2017 17:53:58 -0400</pubDate>
      
      <guid>https://gohugo.io/news/0-25-1/</guid>
      <description> This is a bug-fix release with a couple of important fixes.
Hugo now has:
 18277+ stars 456+ contributors 170+ themes  Fixes  Fix union when the first slice is empty dbbc5c48 @bep #3686 Navigate to changed on CREATE When working with content from IntelliJ IDE, like WebStorm, every file save is followed by two events: &amp;ldquo;RENAME&amp;rdquo; and then &amp;ldquo;CREATE&amp;rdquo;. 7bcc1ce6 @miltador Final (!) fix for issue with escaped JSON front matter 7f82b41a @bep #3682 Fix issue with escaped JSON front matter 84db6c74 @bep #3682  </description>
    </item>
    
    <item>
      <title>0.25.1</title>
      <link>https://gohugo.io/release-notes/0.25.1-relnotes/</link>
      <pubDate>Mon, 10 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/release-notes/0.25.1-relnotes/</guid>
      <description> This is a bug-fix release with a couple of important fixes.
Hugo now has:
 18277+ stars 456+ contributors 170+ themes  Fixes  Fix union when the first slice is empty dbbc5c48 @bep #3686 Navigate to changed on CREATE When working with content from IntelliJ IDE, like WebStorm, every file save is followed by two events: &amp;ldquo;RENAME&amp;rdquo; and then &amp;ldquo;CREATE&amp;rdquo;. 7bcc1ce6 @miltador Final (!) fix for issue with escaped JSON front matter 7f82b41a @bep #3682 Fix issue with escaped JSON front matter 84db6c74 @bep #3682  </description>
    </item>
    
    <item>
      <title>July Release</title>
      <link>https://gohugo.io/news/0-25/</link>
      <pubDate>Fri, 07 Jul 2017 17:53:58 -0400</pubDate>
      
      <guid>https://gohugo.io/news/0-25/</guid>
      <description>Hugo 0.25 is the Kinder Surprise: It automatically opens the page you&amp;#39;re working on in the browser, it adds full AND and OR support in page queries, and you can now have templates per language.
If you start with hugo server --navigateToChanged, Hugo will navigate to the relevant page on save (see animated GIF). This is extremely useful for site-wide edits. Another very useful feature in this version is the added support for AND (intersect) and OR (union) filters when combined with where.</description>
    </item>
    
    <item>
      <title>0.25</title>
      <link>https://gohugo.io/release-notes/0.25-relnotes/</link>
      <pubDate>Fri, 07 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/release-notes/0.25-relnotes/</guid>
      <description>Hugo 0.25 is the Kinder Surprise: It automatically opens the page you&amp;rsquo;re working on in the browser, it adds full AND and OR support in page queries, and you can now have templates per language.
If you start with hugo server --navigateToChanged, Hugo will navigate to the relevant page on save (see animated GIF). This is extremely useful for site-wide edits. Another very useful feature in this version is the added support for AND (intersect) and OR (union) filters when combined with where.</description>
    </item>
    
    <item>
      <title>June Release</title>
      <link>https://gohugo.io/news/0-24-1/</link>
      <pubDate>Sat, 24 Jun 2017 17:53:58 -0400</pubDate>
      
      <guid>https://gohugo.io/news/0-24-1/</guid>
      <description> This release fixes some important archetype-related regressions from the recent Hugo 0.24-release.
Fixes  Fix archetype regression when no archetype file 4294dd8d @bep #3626 Preserve shortcodes in archetype templates b63e4ee1 @bep #3623 Fix handling of timezones with positive UTC offset (e.g., +0800) in TOML 0744f81e @bep #3628  Enhancements  Create default archetype on new site bfa336d9 @bep #3626  </description>
    </item>
    
    <item>
      <title>June Release</title>
      <link>https://gohugo.io/news/0-24/</link>
      <pubDate>Sat, 17 Jun 2017 17:53:58 -0400</pubDate>
      
      <guid>https://gohugo.io/news/0-24/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;A feature that could be the name of the next Indiana Jones movie deserves its own release,&amp;rdquo; says &lt;a href=&#34;https://github.com/bep&#34; target=&#34;_blank&#34;&gt;@bep&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hugo now handles the &lt;strong&gt;archetype files as Go templates&lt;/strong&gt;. This means that the issues with sorting and lost comments are long gone. This also means that you will have to supply all values, including title and date. But this also opens up a lot of new windows.&lt;/p&gt;

&lt;p&gt;A fictional example for the section &lt;code&gt;newsletter&lt;/code&gt; and the archetype file &lt;code&gt;archetypes/newsletter.md&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;---
title: &amp;quot;{{ replace .TranslationBaseName &amp;quot;-&amp;quot; &amp;quot; &amp;quot; | title }}&amp;quot;
date: {{ .Date }}
draft: true
---

**Insert Lead paragraph here.**



## New Cool Posts

{{ range first 10 ( where .Site.RegularPages &amp;quot;Type&amp;quot; &amp;quot;cool&amp;quot; ) }}
* {{ .Title }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then create a new post with:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>June Release</title>
      <link>https://gohugo.io/news/0-23/</link>
      <pubDate>Fri, 16 Jun 2017 17:53:58 -0400</pubDate>
      
      <guid>https://gohugo.io/news/0-23/</guid>
      <description>Hugo 0.23 is mainly a release that handles all the small changes needed to get Hugo moved to a GitHub organisation: gohugoio, but it also contains a couple of important fixes that makes this an update worth-while for all.
Hugo now has:
 17739&amp;#43; stars 494&amp;#43; contributors 165&amp;#43; themes  Fixes  Fix handling of duplicate footnotes a9e551a1 @bep #1912 Add support for spaces in project folder for GitInfo #3533 #3552  GitHub organisation related changes  Update layout references to gohugoio/hugo 66d4850b @bep Update content references to gohugoio/hugo 715ff1f8 @bep Add note on updates for rpm-based distros 52a0cea6 @daftaupe Update logo link in README ccb8300d @bep Remove docs building from CI builds 214dbdfb @bep Adjust docs path 729be807 @bep Add docs as submodule 6cee0dfe @bep Update Gitter link in README fbb25014 @bep Change Windows build badge link, take #3 86543d6a @bep Update Windows build link e6ae32a0 @bep Update links in CONTRIBUTING.</description>
    </item>
    
    <item>
      <title>June Release</title>
      <link>https://gohugo.io/news/0-22-1/</link>
      <pubDate>Tue, 13 Jun 2017 17:53:58 -0400</pubDate>
      
      <guid>https://gohugo.io/news/0-22-1/</guid>
      <description>Hugo 0.22.1 fixes a couple of issues reported after the 0.22 release Monday. Most importantly a fix for detecting regular subfolders below the root-sections.
Also, we forgot to adapt the permalink settings with support for nested sections, which made that feature less useful than it could be.
With this release you can configure permalinks with sections like this:
First level only:
[permalinks] blog = &amp;quot;:section/:title&amp;quot;  Nested (all levels):</description>
    </item>
    
    <item>
      <title>June Release</title>
      <link>https://gohugo.io/news/0-22/</link>
      <pubDate>Mon, 12 Jun 2017 17:53:58 -0400</pubDate>
      
      <guid>https://gohugo.io/news/0-22/</guid>
      <description>Hugo 0.22 brings nested sections, by popular demand and a long sought after feature (#465). We are still low on documentation for this great feature, but @bep has been kind enough to accompany his implementation with a demo site.
This release represents 58 contributions by 10 contributors to the main Hugo code base. Since last release Hugo has gained 420 stars and 2 additional themes.
@bep still leads the Hugo development with his witty Norwegian humor, and once again contributed a significant amount of additions.</description>
    </item>
    
    <item>
      <title>May Release</title>
      <link>https://gohugo.io/news/0-21/</link>
      <pubDate>Mon, 22 May 2017 17:53:58 -0400</pubDate>
      
      <guid>https://gohugo.io/news/0-21/</guid>
      <description>Hugo 0.21 brings full support for shortcodes per Output Format (#3220), the last vital piece of that puzzle. This is especially useful for Google AMP with its many custom media tags.
This release represents 126 contributions by 29 contributors to the main Hugo code base. Since last main release Hugo has gained 850 stars and 7 additional themes.
Hugo now has:
 17156&amp;#43; stars 457&amp;#43; contributors 163&amp;#43; themes  @bep leads the Hugo development with a significant amount of contributions, but also a big shoutout to @moorereason, @bogem, and @munnerz for their ongoing contributions.</description>
    </item>
    
    <item>
      <title>May Release</title>
      <link>https://gohugo.io/news/0-20-7/</link>
      <pubDate>Wed, 03 May 2017 17:53:58 -0400</pubDate>
      
      <guid>https://gohugo.io/news/0-20-7/</guid>
      <description> This just fixes an issue with the release scripts, no change in the binaries.
Hugo now has:
 16782&amp;#43; stars 458&amp;#43; contributors 156&amp;#43; themes  Fix  Push the tag before goreleaser is run 3682bf52 @bep #3405  </description>
    </item>
    
    <item>
      <title>April Release</title>
      <link>https://gohugo.io/news/0-20-6/</link>
      <pubDate>Thu, 27 Apr 2017 17:53:58 -0400</pubDate>
      
      <guid>https://gohugo.io/news/0-20-6/</guid>
      <description> There have been some shouting on discuss.gohugo.io about some broken sites after the release of Hugo 0.20. This release reintroduces the old behaviour, making /my-blog-post/index.md work as expected.
Hugo now has:
 16675&amp;#43; stars 456&amp;#43; contributors 156&amp;#43; themes  Fixes  Avoid index.md in /index/index.html #3396 Make missing GitInfo a WARNING b30ca4be @bep #3376 Fix some of the fpm fields for deb 3bd1d057 @anthonyfok  </description>
    </item>
    
    <item>
      <title>April Release</title>
      <link>https://gohugo.io/news/0-20-5/</link>
      <pubDate>Tue, 25 Apr 2017 17:53:58 -0400</pubDate>
      
      <guid>https://gohugo.io/news/0-20-5/</guid>
      <description>This is a bug-fix release which fixes the version number of 0.20.4 (which wrongly shows up as 0.21-DEV) (#3388).</description>
    </item>
    
    <item>
      <title>April Release</title>
      <link>https://gohugo.io/news/0-20-4/</link>
      <pubDate>Mon, 24 Apr 2017 17:53:58 -0400</pubDate>
      
      <guid>https://gohugo.io/news/0-20-4/</guid>
      <description> This is the second bug-fix release of the day, fixing a couple of issues related to the new release scripts.
Hugo now has:
 16626&amp;#43; stars 457&amp;#43; contributors 156&amp;#43; themes  Fixes  Fix statically linked binaries 275bcf56 @munnerz #3382 Filename change in Hugo 0.20.3 binaries #3385 Fix version calculation cb3c6b6f @bep  </description>
    </item>
    
    <item>
      <title>April Release</title>
      <link>https://gohugo.io/news/0-20-3/</link>
      <pubDate>Mon, 24 Apr 2017 13:53:58 -0400</pubDate>
      
      <guid>https://gohugo.io/news/0-20-3/</guid>
      <description> This is a bug-fix release with one important fix. But it also adds some harness around GoReleaser to automate the Hugo release process. Big thanks to @caarlos0 for great and super-fast support fixing issues along the way.
Hugo now has:
 16619&amp;#43; stars 458&amp;#43; contributors 156&amp;#43; themes  Enhancement  Automate the Hugo release process 550eba64 @bep #3358  Fix  Fix handling of zero-length files 9bf5c381 @bep #3355  </description>
    </item>
    
    <item>
      <title>April Release</title>
      <link>https://gohugo.io/news/0-20-2/</link>
      <pubDate>Sun, 16 Apr 2017 13:53:58 -0400</pubDate>
      
      <guid>https://gohugo.io/news/0-20-2/</guid>
      <description>Hugo 0.20.2 adds support for plain text partials included into HTML templates. This was a side-effect of the big new Custom Output Format feature in 0.20, and while the change was intentional and there was an ongoing discussion about fixing it in #3273, it did break some themes. There were valid workarounds for these themes, but we might as well get it right.
The most obvious use case for this is inline CSS styles, which you now can do without having to name your partials with a html suffix.</description>
    </item>
    
    <item>
      <title>April Release</title>
      <link>https://gohugo.io/news/0-20-1/</link>
      <pubDate>Thu, 13 Apr 2017 13:53:58 -0400</pubDate>
      
      <guid>https://gohugo.io/news/0-20-1/</guid>
      <description> Fix logic for base template in work dir vs in the theme #3323 camelCased templates (partials, shortcodes etc.) not found #3333 Live-reload fails with _index.md with paginator #3315 rssURI WARNING always shown #3319  </description>
    </item>
    
    <item>
      <title>April Release</title>
      <link>https://gohugo.io/news/0-20/</link>
      <pubDate>Mon, 10 Apr 2017 13:53:58 -0400</pubDate>
      
      <guid>https://gohugo.io/news/0-20/</guid>
      <description>Hugo 0.20 introduces the powerful and long sought after feature Custom Output Formats; Hugo isn’t just that “static HTML with an added RSS feed” anymore. Say hello to calendars, e-book formats, Google AMP, and JSON search indexes, to name a few ( #2828 ).
This release represents over 180 contributions by over 30 contributors to the main Hugo code base. Since last release Hugo has gained 1100 stars, 20 new contributors and 5 additional themes.</description>
    </item>
    
    <item>
      <title>February Release</title>
      <link>https://gohugo.io/news/0-19/</link>
      <pubDate>Mon, 27 Feb 2017 13:53:58 -0400</pubDate>
      
      <guid>https://gohugo.io/news/0-19/</guid>
      <description>We&amp;rsquo;re happy to announce the first release of Hugo in 2017.
This release represents over 180 contributions by over 50 contributors to the main Hugo code base. Since last release Hugo has gained 1450 stars, 35 new contributors, and 15 additional themes.
Hugo now has:
 15200+ stars 470+ contributors 151+ themes  Furthermore, Hugo has its own Twitter account (@gohugoio) where we share bite-sized news and themes from the Hugo community.</description>
    </item>
    
    <item>
      <title>.AddDate</title>
      <link>https://gohugo.io/functions/adddate/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/adddate/</guid>
      <description>The AddDate function takes three arguments in logical order of years, months, and days.
Example: Randomized Tweets from the Last 2 Years Let&amp;rsquo;s assume you have a file at data/tweets.toml that contains a list of Tweets to display on your site&amp;rsquo;s homepage. The file is filled with [[tweet]] blocks; e.g.&amp;mdash;
[[tweet]] name = &amp;quot;Steve Francia&amp;quot; twitter_handle = &amp;quot;@spf13&amp;quot; quote = &amp;quot;I&#39;m creator of Hugo. #metadocreference&amp;quot; link = &amp;quot;https://twitter.com/spf13&amp;quot; date = &amp;quot;2017-01-07T00:00:00Z&amp;quot;  Let&amp;rsquo;s assume you want to grab Tweets from the last two years and present them in a random order.</description>
    </item>
    
    <item>
      <title>.Format</title>
      <link>https://gohugo.io/functions/format/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/format/</guid>
      <description>.Format will format date values defined in your front matter and can be used as a property on the following page variables:
 .PublishDate .Date .LastMod  Assuming a key-value of date: 2017-03-03 in a content file&amp;rsquo;s front matter, your can run the date through .Format followed by a layout string for your desired output at build time:
{{ .PublishDate.Format &amp;quot;January 2, 2006&amp;quot; }} =&amp;gt; March 3, 2017  For formatting any string representations of dates defined in your front matter, see the dateFormat function, which will still leverage the Golang layout string explained below but uses a slightly different syntax.</description>
    </item>
    
    <item>
      <title>.Get</title>
      <link>https://gohugo.io/functions/get/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/get/</guid>
      <description>.Get is specifically used when creating your own shortcode template.</description>
    </item>
    
    <item>
      <title>.GetPage</title>
      <link>https://gohugo.io/functions/getpage/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/getpage/</guid>
      <description>Every Page has a Kind attribute that shows what kind of page it is. While this attribute can be used to list pages of a certain kind using where, often it can be useful to fetch a single page by its path.
.GetPage looks up a page of a given Kind and path.
{{ with .Site.GetPage &amp;quot;section&amp;quot; &amp;quot;blog&amp;quot; }}{{ .Title }}{{ end }}  This method wil return nil when no page could be found, so the above will not print anything if the blog section isn&amp;rsquo;t found.</description>
    </item>
    
    <item>
      <title>.Param</title>
      <link>https://gohugo.io/functions/param/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/param/</guid>
      <description>In Hugo, you can declare site-wide params (i.e. in your configuration), as well as params for individual pages.
A common use case is to have a general value for the site and a more specific value for some of the pages (e.g., an image).
You can use the .Param method to call these values into your template. The following will first look for an image param in a specific content&amp;rsquo;s front matter.</description>
    </item>
    
    <item>
      <title>.Scratch</title>
      <link>https://gohugo.io/functions/scratch/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/scratch/</guid>
      <description>In most cases you can do well without Scratch, but there are some use cases that aren&amp;rsquo;t solvable with Go&amp;rsquo;s templates without Scratch&amp;rsquo;s help, due to scoping issues.
Scratch is added to both Page and Shortcode &amp;ndash; with following methods:
 Set and Add takes a key and the value to add. Get returns the value for the key given. SetInMap takes a key, mapKey and value GetSortedMapValues returns array of values from key sorted by mapKey  Set and SetInMap can store values of any type.</description>
    </item>
    
    <item>
      <title>.Unix</title>
      <link>https://gohugo.io/functions/unix/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/unix/</guid>
      <description>Example: Time Passed Since Last Modification This very simple one-liner uses now.Unix to calculate the amount of time that has passed between the .LastMod for the current page and the last build of the current page.
time-passed.html  {{ div (sub now.Unix .Lastmod.Unix) 86400 }}    Since both values are integers, they can be subtracted and then divided by the number of seconds in a day (i.e., 60 * 60 * 24 == 86400).</description>
    </item>
    
    <item>
      <title>Accented Characters in URLs</title>
      <link>https://gohugo.io/troubleshooting/accented-characters-in-urls/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/troubleshooting/accented-characters-in-urls/</guid>
      <description>Trouble: Categories with accented characters  One of my categories is named &amp;ldquo;Le-carré,&amp;rdquo; but the link ends up being generated like this:
categories/le-carr%C3%A9  And not working. Is there an easy fix for this that I&amp;rsquo;m overlooking?
 Solution Are you a macOS user? If so, you are likely a victim of HFS Plus file system&amp;rsquo;s insistence to store the &amp;ldquo;é&amp;rdquo; (U+00E9) character in Normal Form Decomposed (NFD) mode, i.</description>
    </item>
    
    <item>
      <title>EOF Error</title>
      <link>https://gohugo.io/troubleshooting/eof-error/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/troubleshooting/eof-error/</guid>
      <description>Trouble: hugo new Aborts with EOF error  I&amp;rsquo;m running into an issue where I cannot get archetypes working, when running hugo new showcase/test.md, for example, I see an EOF error thrown by Hugo.
When I run Hugo with v0.12 via hugo new -v showcase/test.md, I see the following output:
INFO: 2015/01/04 Using config file: /private/tmp/test/config.toml INFO: 2015/01/04 attempting to create showcase/test.md of showcase INFO: 2015/01/04 curpath: /private/tmp/test/archetypes/showcase.md ERROR: 2015/01/04 EOF  Is there something that I am blatantly missing?</description>
    </item>
    
    <item>
      <title>Math</title>
      <link>https://gohugo.io/functions/math/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/math/</guid>
      <description>There are 6 basic mathematical operators that can be used in Hugo templates:
   Function Description Example     add Adds two integers. {{add 1 2}} &amp;rarr; 3   div Divides two integers. {{div 6 3}} &amp;rarr; 2   mod Modulus of two integers. {{mod 15 3}} &amp;rarr; 0   modBool Boolean of modulus of two integers. Evaluates to true if = 0.</description>
    </item>
    
    <item>
      <title>absLangURL</title>
      <link>https://gohugo.io/functions/abslangurl/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/abslangurl/</guid>
      <description>Both absLangURL and relLangURL are similar to their absURL and relURL relatives but will add the correct language prefix when the site is configured with more than one language.
So for a site baseURL set to http://yoursite.com/hugo/ and the current language is en:
{{ &amp;quot;blog/&amp;quot; | absLangURL }} → &amp;quot;http://yoursite.com/hugo/en/blog/&amp;quot; {{ &amp;quot;blog/&amp;quot; | relLangURL }} → &amp;quot;/hugo/en/blog/&amp;quot;  </description>
    </item>
    
    <item>
      <title>absURL</title>
      <link>https://gohugo.io/functions/absurl/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/absurl/</guid>
      <description>Both absURL and relURL consider the configured value of baseURL in your site&amp;rsquo;s config file. Given a baseURL set to http://yoursite.com/hugo/:
{{ &amp;quot;mystyle.css&amp;quot; | absURL }} → &amp;quot;http://yoursite.com/hugo/mystyle.css&amp;quot; {{ &amp;quot;mystyle.css&amp;quot; | relURL }} → &amp;quot;/hugo/mystyle.css&amp;quot; {{ &amp;quot;http://gohugo.io/&amp;quot; | relURL }} → &amp;quot;http://gohugo.io/&amp;quot; {{ &amp;quot;http://gohugo.io/&amp;quot; | absURL }} → &amp;quot;http://gohugo.io/&amp;quot;  The last two examples may look strange but can be very useful. For example, the following shows how to use absURL in JSON-LD structured data (SEO), where some of your images for a piece of content may or may not be hosted locally:</description>
    </item>
    
    <item>
      <title>after</title>
      <link>https://gohugo.io/functions/after/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/after/</guid>
      <description>The following shows after being used in conjunction with the slice function:
{{ $data := slice &amp;quot;one&amp;quot; &amp;quot;two&amp;quot; &amp;quot;three&amp;quot; &amp;quot;four&amp;quot; }} {{ range after 2 $data }} {{ . }} {{ end }} → [&amp;quot;three&amp;quot;, &amp;quot;four&amp;quot;]  Example of after with first: 2nd&amp;ndash;4th Most Recent Articles You can use after in combination with the first function and Hugo&amp;rsquo;s powerful sorting methods. Let&amp;rsquo;s assume you have a list page at yoursite.</description>
    </item>
    
    <item>
      <title>apply</title>
      <link>https://gohugo.io/functions/apply/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/apply/</guid>
      <description>apply expects at least three parameters, depending on the function being applied.
 The first parameter is the sequence to operate on The second parameter is the name of the function as a string, which must be the name of a valid Hugo function. After that, the parameters to the applied function are provided, with the string &amp;quot;.&amp;quot; standing in for each element of the sequence the function is to be applied against.</description>
    </item>
    
    <item>
      <title>base64</title>
      <link>https://gohugo.io/functions/base64/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/base64/</guid>
      <description>An example:
base64-input.html  &amp;lt;p&amp;gt;Hello world = {{ &amp;quot;Hello world&amp;quot; | base64Encode }}&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;SGVsbG8gd29ybGQ = {{ &amp;quot;SGVsbG8gd29ybGQ=&amp;quot; | base64Decode }}&amp;lt;/p&amp;gt;    base-64-output.html &amp;lt;p&amp;gt;Hello world = SGVsbG8gd29ybGQ=&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;SGVsbG8gd29ybGQ = Hello world&amp;lt;/p&amp;gt;    You can also pass other data types as arguments to the template function which tries to convert them. The following will convert 42 from an integer to a string because both base64Encode and base64Decode always return a string.</description>
    </item>
    
    <item>
      <title>chomp</title>
      <link>https://gohugo.io/functions/chomp/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/chomp/</guid>
      <description>Useful in a pipeline to remove newlines added by other processing (e.g., markdownify).
 </description>
    </item>
    
    <item>
      <title>countrunes</title>
      <link>https://gohugo.io/functions/countrunes/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/countrunes/</guid>
      <description>In contrast with countwords function, which counts every word in a string, the countrunes function determines the number of runes in the content and excludes any whitespace. This has specific utility if you are dealing with CJK-like languages.
{{ &amp;quot;Hello, 世界&amp;quot; | countrunes }} &amp;lt;!-- outputs a content length of 8 runes. --&amp;gt;  </description>
    </item>
    
    <item>
      <title>countwords</title>
      <link>https://gohugo.io/functions/countwords/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/countwords/</guid>
      <description>The template function works similar to the .WordCount page variable.
{{ &amp;quot;Hugo is a static site generator.&amp;quot; | countwords }} &amp;lt;!-- outputs a content length of 6 words. --&amp;gt;  </description>
    </item>
    
    <item>
      <title>dateFormat</title>
      <link>https://gohugo.io/functions/dateformat/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/dateformat/</guid>
      <description>dateFormat converts the textual representation of the datetime into the specified format or returns it as a Go time.Time type value. These are formatted with the layout string.
{{ dateFormat &amp;quot;Monday, Jan 2, 2006&amp;quot; &amp;quot;2015-01-21&amp;quot; }} → &amp;quot;Wednesday, Jan 21, 2015&amp;quot;   As of v0.19 of Hugo, the dateFormat function is not supported as part of Hugo&amp;rsquo;s multilingual feature.
  See the Format function for a more complete list of date formatting options in your templates.</description>
    </item>
    
    <item>
      <title>default</title>
      <link>https://gohugo.io/functions/default/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/default/</guid>
      <description>default checks whether a given value is set and returns a default value if it is not. Set in this context means different things depending on date type:
 non-zero for numeric types and times non-zero length for strings, arrays, slices, and maps any boolean or struct value non-nil for any other types  default function examples reference the following content page:
content/posts/default-function-example.md  --- title: Sane Defaults seo_title: date: 2017-02-18 font: oldparam: The default function helps make your templating DRYer.</description>
    </item>
    
    <item>
      <title>delimit</title>
      <link>https://gohugo.io/functions/delimit/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/delimit/</guid>
      <description>delimit called in your template takes the form of
{{ delimit array/slice/map delimiter optionallastdelimiter}}  delimit loops through any array, slice, or map and returns a string of all the values separated by a delimiter, the second argument in the function call. There is an optional third parameter that lets you choose a different delimiter to go between the last two values in the loop.
To maintain a consistent output order, maps will be sorted by keys and only a slice of the values will be returned.</description>
    </item>
    
    <item>
      <title>dict</title>
      <link>https://gohugo.io/functions/dict/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/dict/</guid>
      <description>dict is especially useful for passing more than one value to a partial template.
Example: dict with Embedded SVGs The partial below creates a SVG and expects fill height and width from the caller:
layouts/partials/svgs/external-links.svg  &amp;lt;svg version=&amp;quot;1.1&amp;quot; xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot; xmlns:xlink=&amp;quot;http://www.w3.org/1999/xlink&amp;quot; fill=&amp;quot;{{ .fill }}&amp;quot; width=&amp;quot;{{ .size }}&amp;quot; height=&amp;quot;{{ .size }}&amp;quot; viewBox=&amp;quot;0 0 32 32&amp;quot; aria-label=&amp;quot;External Link&amp;quot;&amp;gt; &amp;lt;path d=&amp;quot;M25.152 16.576v5.696q0 2.144-1.504 3.648t-3.648 1.504h-14.848q-2.144 0-3.648-1.504t-1.504-3.648v-14.848q0-2.112 1.504-3.616t3.648-1.536h12.576q0.224 0 0.384 0.16t0.16 0.416v1.152q0 0.256-0.16 0.416t-0.384 0.</description>
    </item>
    
    <item>
      <title>echoParam</title>
      <link>https://gohugo.io/functions/echoparam/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/echoparam/</guid>
      <description>{{ echoParam .Params &amp;quot;project_url&amp;quot; }}  </description>
    </item>
    
    <item>
      <title>emojify</title>
      <link>https://gohugo.io/functions/emojify/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/emojify/</guid>
      <description>emoji runs a passed string through the Emoji emoticons processor.
See the Emoji cheat sheet for available emoticons.
The emojify function can be called in your templates but not directly in your content files by default. For emojis in content files, set enableEmoji to true in your site&amp;rsquo;s configuration. Then you can write emoji shorthand directly into your content files; e.g. I :heart: Hugo!:
I ❤️ Hugo!</description>
    </item>
    
    <item>
      <title>eq</title>
      <link>https://gohugo.io/functions/eq/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/eq/</guid>
      <description>{{ if eq .Section &amp;quot;blog&amp;quot; }}current{{ end }}  </description>
    </item>
    
    <item>
      <title>findRE</title>
      <link>https://gohugo.io/functions/findre/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/findre/</guid>
      <description>By default all matches will be included. The number of matches can be limitted with an optional third parameter.
The example below returns a list of all second level headers (&amp;lt;h2&amp;gt;) in the content:
{{ findRE &amp;quot;&amp;lt;h2.*?&amp;gt;(.|\n)*?&amp;lt;/h2&amp;gt;&amp;quot; .Content }}  You can limit the number of matches in the list with a third parameter. The following example shows how to limit the returned value to just one match (or none, if there are no matched substrings):</description>
    </item>
    
    <item>
      <title>first</title>
      <link>https://gohugo.io/functions/first/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/first/</guid>
      <description>{{ range first 10 .Data.Pages }} {{ .Render &amp;quot;summary&amp;quot; }} {{ end }}  </description>
    </item>
    
    <item>
      <title>getenv</title>
      <link>https://gohugo.io/functions/getenv/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/getenv/</guid>
      <description>Takes a string containing the name of the variable as input. Returns an empty string if the variable is not set, otherwise returns the value of the variable.
{{ getenv &amp;quot;HOME&amp;quot; }}   In Unix-like environments, the variable must also be exported in order to be seen by hugo.
  </description>
    </item>
    
    <item>
      <title>hasprefix</title>
      <link>https://gohugo.io/functions/hasprefix/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/hasprefix/</guid>
      <description> {{ hasPrefix &amp;quot;Hugo&amp;quot; &amp;quot;Hu&amp;quot; }} → true  </description>
    </item>
    
    <item>
      <title>highlight</title>
      <link>https://gohugo.io/functions/highlight/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/highlight/</guid>
      <description>highlight is used in Hugo&amp;rsquo;s built-in highlight shortcode.
See Installing Hugo for more information on Pygments or Syntax Highlighting for more options on how to add syntax highlighting to your code blocks with Hugo.</description>
    </item>
    
    <item>
      <title>htmlEscape</title>
      <link>https://gohugo.io/functions/htmlescape/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/htmlescape/</guid>
      <description>In the result &amp;amp; becomes &amp;amp;amp; and so on. It escapes only: &amp;lt;, &amp;gt;, &amp;amp;, &#39; and &amp;quot;.
{{ htmlEscape &amp;quot;Hugo &amp;amp; Caddy &amp;gt; Wordpress &amp;amp; Apache&amp;quot; }} → &amp;quot;Hugo &amp;amp;amp; Caddy &amp;amp;gt; Wordpress &amp;amp;amp; Apache&amp;quot;  </description>
    </item>
    
    <item>
      <title>htmlUnescape</title>
      <link>https://gohugo.io/functions/htmlunescape/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/htmlunescape/</guid>
      <description>htmlUnescape returns the given string with HTML escape codes un-escaped.
Remember to pass the output of this to safeHTML if fully un-escaped characters are desired. Otherwise, the output will be escaped again as normal.
{{ htmlUnescape &amp;quot;Hugo &amp;amp;amp; Caddy &amp;amp;gt; Wordpress &amp;amp;amp; Apache&amp;quot; }} → &amp;quot;Hugo &amp;amp; Caddy &amp;gt; Wordpress &amp;amp; Apache&amp;quot;  </description>
    </item>
    
    <item>
      <title>humanize</title>
      <link>https://gohugo.io/functions/humanize/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/humanize/</guid>
      <description>If the input is either an int64 value or the string representation of an integer, humanize returns the number with the proper ordinal appended.
{{humanize &amp;quot;my-first-post&amp;quot;}} → &amp;quot;My first post&amp;quot; {{humanize &amp;quot;myCamelPost&amp;quot;}} → &amp;quot;My camel post&amp;quot; {{humanize &amp;quot;52&amp;quot;}} → &amp;quot;52nd&amp;quot; {{humanize 103}} → &amp;quot;103rd&amp;quot;  </description>
    </item>
    
    <item>
      <title>i18n</title>
      <link>https://gohugo.io/functions/i18n/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/i18n/</guid>
      <description>This translates a piece of content based on your i18n/en-US.yaml (and similar) files. You can use the go-i18n tools to manage your translations. The translations can exist in both the theme and at the root of your repository.
{{ i18n &amp;quot;translation_id&amp;quot; }}   T is an alias to i18n. E.g. {{ T &amp;quot;translation_id&amp;quot; }}.
  For more information about string translations, see Translation of Strings in Multilingual Mode.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://gohugo.io/functions/imageconfig/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/imageconfig/</guid>
      <description>{{ with (imageConfig &amp;quot;favicon.ico&amp;quot;) }} favicon.ico: {{.Width}} x {{.Height}} {{ end }}  </description>
    </item>
    
    <item>
      <title>in</title>
      <link>https://gohugo.io/functions/in/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/in/</guid>
      <description>The elements supported are strings, integers and floats, although only float64 will match as expected.
In addition, in can also check if a substring exists in a string.
{{ if in .Params.tags &amp;quot;Git&amp;quot; }}Follow me on GitHub!{{ end }}  {{ if in &amp;quot;this string contains a substring&amp;quot; &amp;quot;substring&amp;quot; }}Substring found!{{ end }}  </description>
    </item>
    
    <item>
      <title>index</title>
      <link>https://gohugo.io/functions/index-function/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/index-function/</guid>
      <description>From the Godocs:
 Returns the result of indexing its first argument by the following arguments. Thus &amp;ldquo;index x 1 2 3&amp;rdquo; is, in Go syntax, x[1][2][3]. Each indexed item must be a map, slice, or array.
 In Go templates, you can&amp;rsquo;t access array, slice, or map elements directly the same way you would in Go. For example, $.Site.Data.authors[.Params.authorkey] isn&amp;rsquo;t supported syntax.
Instead, you have to use index, a function that handles the lookup for you.</description>
    </item>
    
    <item>
      <title>int</title>
      <link>https://gohugo.io/functions/int/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/int/</guid>
      <description>Useful for turning strings into numbers.
{{ int &amp;quot;123&amp;quot; }} → 123  </description>
    </item>
    
    <item>
      <title>intersect</title>
      <link>https://gohugo.io/functions/intersect/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/intersect/</guid>
      <description>The elements supported are strings, integers, and floats (only float64).
A useful example of intersect functionality is a &amp;ldquo;related posts&amp;rdquo; block. isset allows us to create a list of links to other posts that have tags that intersect with the tags in the current post.
The following is an example of a &amp;ldquo;related posts&amp;rdquo; partial template that could be added to a single page template:
layouts/partials/related-posts.html  &amp;lt;ul&amp;gt; {{ $page_link := .</description>
    </item>
    
    <item>
      <title>isset</title>
      <link>https://gohugo.io/functions/isset/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/isset/</guid>
      <description>Takes either a slice, array, or channel and an index or a map and a key as input.
{{ if isset .Params &amp;quot;project_url&amp;quot; }} {{ index .Params &amp;quot;project_url&amp;quot; }}{{ end }}   All site-level configuration keys are stored as lower case. Therefore, a myParam key-value set in your site configuration file needs to be accessed with {{if isset .Site.Params &amp;quot;myparam&amp;quot;}} and not with {{if isset .Site.Params &amp;quot;myParam&amp;quot;}}. Note that you can still access the same config key with .</description>
    </item>
    
    <item>
      <title>jsonify</title>
      <link>https://gohugo.io/functions/jsonify/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/jsonify/</guid>
      <description>{{ dict &amp;quot;title&amp;quot; .Title &amp;quot;content&amp;quot; .Plain | jsonify }}  See also the .PlainWords, .Plain, and .RawContent page variables.</description>
    </item>
    
    <item>
      <title>lang.NumFmt</title>
      <link>https://gohugo.io/functions/numfmt/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/numfmt/</guid>
      <description>The default options value is - . ,.
Numbers greater than or equal to 5 are rounded up. For example, if precision is set to 0, 1.5 becomes 2, and 1.4 becomes 1.
{{ lang.NumFmt &amp;quot;,&amp;quot; &amp;quot;.&amp;quot; &amp;quot;-&amp;quot; 2 12345.6789 }} → 12.345,68 {{ lang.NumFmt &amp;quot;.&amp;quot; &amp;quot;&amp;quot; &amp;quot;-&amp;quot; 6 -12345.6789 }} → -12345.678900 {{ lang.NumFmt &amp;quot;.&amp;quot; &amp;quot;,&amp;quot; &amp;quot;-&amp;quot; 0 -12345.6789 }} → -12,346 {{ -98765.4321 | lang.NumFmt &amp;quot;.&amp;quot; &amp;quot;,&amp;quot; &amp;quot;-&amp;quot; 2 }} → -98,765.</description>
    </item>
    
    <item>
      <title>last</title>
      <link>https://gohugo.io/functions/last/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/last/</guid>
      <description>{{ range last 10 .Data.Pages }} {{ .Render &amp;quot;summary&amp;quot; }} {{ end }}  </description>
    </item>
    
    <item>
      <title>len</title>
      <link>https://gohugo.io/functions/len/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/len/</guid>
      <description>len is a built-in function in Golang that returns the length of a variable according to its type. From the Golang documentation:
 Array: the number of elements in v.
Pointer to array: the number of elements in *v (even if v is nil).
Slice, or map: the number of elements in v; if v is nil, len(v) is zero.
String: the number of bytes in v.
Channel: the number of elements queued (unread) in the channel buffer; if v is nil, len(v) is zero.</description>
    </item>
    
    <item>
      <title>lower</title>
      <link>https://gohugo.io/functions/lower/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/lower/</guid>
      <description>{{lower &amp;quot;BatMan&amp;quot;}} → &amp;quot;batman&amp;quot;  </description>
    </item>
    
    <item>
      <title>markdownify</title>
      <link>https://gohugo.io/functions/markdownify/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/markdownify/</guid>
      <description>{{ .Title | markdownify }}  </description>
    </item>
    
    <item>
      <title>md5</title>
      <link>https://gohugo.io/functions/md5/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/md5/</guid>
      <description>{{ md5 &amp;quot;Hello world, gophers!&amp;quot; }} &amp;lt;!-- returns the string &amp;quot;b3029f756f98f79e7f1b7f1d1f0dd53b&amp;quot; --&amp;gt;  This can be useful if you want to use Gravatar for generating a unique avatar:
&amp;lt;img src=&amp;quot;https://www.gravatar.com/avatar/{{ md5 &amp;quot;your@email.com&amp;quot; }}?s=100&amp;amp;d=identicon&amp;quot;&amp;gt;  </description>
    </item>
    
    <item>
      <title>now</title>
      <link>https://gohugo.io/functions/now/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/now/</guid>
      <description>See time.Time.
For example, building your site on June 24, 2017 with the following templating:
&amp;lt;div&amp;gt; &amp;lt;small&amp;gt;&amp;amp;copy; {{ now.Format &amp;quot;2006&amp;quot;}}&amp;lt;/small&amp;gt; &amp;lt;/div&amp;gt;  Which will produce the following:
&amp;lt;div&amp;gt; &amp;lt;small&amp;gt;&amp;amp;copy; 2017&amp;lt;/small&amp;gt; &amp;lt;/div&amp;gt;  The above example uses the .Format function, which page includes a full listing of date formatting using Golang&amp;rsquo;s layout string.
 Older Hugo themes may use the deprecated .Now (uppercase). Be sure to use the lowercase .now in your templating.</description>
    </item>
    
    <item>
      <title>partialCached</title>
      <link>https://gohugo.io/functions/partialcached/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/partialcached/</guid>
      <description>The partialCached template function can offer significant performance gains for complex templates that don&amp;rsquo;t need to be re-rendered on every invocation. Here is the simplest usage:
{{ partialCached &amp;quot;footer.html&amp;quot; . }}  You can also pass additional parameters to partialCached to create variants of the cached partial. For example, if you have a complex partial that should be identical when rendered for pages within the same section, you could use a variant based upon section so that the partial is only rendered once per section:</description>
    </item>
    
    <item>
      <title>plainify</title>
      <link>https://gohugo.io/functions/plainify/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/plainify/</guid>
      <description>{{ &amp;quot;&amp;lt;b&amp;gt;BatMan&amp;lt;/b&amp;gt;&amp;quot; | plainify }} → &amp;quot;BatMan&amp;quot;  See also the .PlainWords, .Plain, and .RawContent page variables.</description>
    </item>
    
    <item>
      <title>pluralize</title>
      <link>https://gohugo.io/functions/pluralize/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/pluralize/</guid>
      <description>{{ &amp;quot;cat&amp;quot; | pluralize }} → &amp;quot;cats&amp;quot;  </description>
    </item>
    
    <item>
      <title>printf</title>
      <link>https://gohugo.io/functions/printf/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/printf/</guid>
      <description>See the go doc for additional information.
{{ i18n ( printf &amp;quot;combined_%s&amp;quot; $var ) }}  {{ printf &amp;quot;formatted %.2f&amp;quot; 3.1416 }}  </description>
    </item>
    
    <item>
      <title>querify</title>
      <link>https://gohugo.io/functions/querify/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/querify/</guid>
      <description>querify takes a set of key-value pairs and returns a query string that can be appended to a URL. E.g.
The following example creates a link to a search results page on Google.
&amp;lt;a href=&amp;quot;https://www.google.com?{{ (querify &amp;quot;q&amp;quot; &amp;quot;test&amp;quot; &amp;quot;page&amp;quot; 3) | safeURL }}&amp;quot;&amp;gt;Search&amp;lt;/a&amp;gt;  This example renders the following HTML:
&amp;lt;a href=&amp;quot;https://www.google.com?page=3&amp;amp;q=test&amp;quot;&amp;gt;Search&amp;lt;/a&amp;gt;  </description>
    </item>
    
    <item>
      <title>range</title>
      <link>https://gohugo.io/functions/range/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/range/</guid>
      <description>Just like in the Go programming language, Go and Hugo templates make heavy use of range to iterate over a map, array or slice.
range is fundamental to templating in Hugo. (See the Introduction to Hugo Templates for more examples.</description>
    </item>
    
    <item>
      <title>readDir</title>
      <link>https://gohugo.io/functions/readdir/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/readdir/</guid>
      <description>If your current project working directory has a single file named README.txt:
{{ range (readDir &amp;quot;.&amp;quot;) }}{{ .Name }}{{ end }} → &amp;quot;README.txt&amp;quot;  For more information on using readDir and readFile in your templates, see Local File Templates.</description>
    </item>
    
    <item>
      <title>readFile</title>
      <link>https://gohugo.io/functions/readfile/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/readfile/</guid>
      <description>Note that the filename must be relative to the current project working directory.
So, if you have a file with the name README.txt in the root of your project with the content Hugo Rocks!:
{{readFile &amp;quot;README.txt&amp;quot;}} → &amp;quot;Hugo Rocks!&amp;quot;  For more information on using readDir and readFile in your templates, see Local File Templates.</description>
    </item>
    
    <item>
      <title>ref</title>
      <link>https://gohugo.io/functions/ref/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/ref/</guid>
      <description>ref and relRef look up a content page by relative path (relref) or logical name (ref) to return the permalink. Both functions require a Page object (usually satisfied with a &amp;ldquo;.&amp;rdquo;):
{{ relref . &amp;quot;about.md&amp;quot; }}  These functions are used in two of Hugo&amp;rsquo;s built-in shortcodes. You can see basic usage examples of both ref and relref in the shortcode documentation.
For an extensive explanation of how to leverage ref and relref for content management, see Cross References.</description>
    </item>
    
    <item>
      <title>relLangURL</title>
      <link>https://gohugo.io/functions/rellangurl/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/rellangurl/</guid>
      <description>absLangURL and relLangURL functions are similar to their absURL and relURL relatives but will add the correct language prefix when the site is configured with more than one language. (See Configuring Multilingual.)
So for a site baseURL set to http://yoursite.com/hugo/ and the current language is en:
{{ &amp;quot;blog/&amp;quot; | absLangURL }} → &amp;quot;http://yoursite.com/hugo/en/blog/&amp;quot; {{ &amp;quot;blog/&amp;quot; | relLangURL }} → &amp;quot;/hugo/en/blog/&amp;quot;  </description>
    </item>
    
    <item>
      <title>relURL</title>
      <link>https://gohugo.io/functions/relurl/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/relurl/</guid>
      <description>Both absURL and relURL consider the configured value of baseURL in your site&amp;rsquo;s config file. Given a baseURL set to http://yoursite.com/hugo/:
{{ &amp;quot;mystyle.css&amp;quot; | absURL }} → &amp;quot;http://yoursite.com/hugo/mystyle.css&amp;quot; {{ &amp;quot;mystyle.css&amp;quot; | relURL }} → &amp;quot;/hugo/mystyle.css&amp;quot; {{ &amp;quot;http://gohugo.io/&amp;quot; | relURL }} → &amp;quot;http://gohugo.io/&amp;quot; {{ &amp;quot;http://gohugo.io/&amp;quot; | absURL }} → &amp;quot;http://gohugo.io/&amp;quot;  The last two examples may look strange but can be very useful. For example, the following shows how to use absURL in JSON-LD structured data for SEO where some of your images for a piece of content may or may not be hosted locally:</description>
    </item>
    
    <item>
      <title>relref</title>
      <link>https://gohugo.io/functions/relref/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/relref/</guid>
      <description>ref and relRef look up a content page by relative path (relref) or logical name (ref) to return the permalink. Both functions require a Page object (usually satisfied with a &amp;ldquo;.&amp;rdquo;):
{{ relref . &amp;quot;about.md&amp;quot; }}  These functions are used in two of Hugo&amp;rsquo;s built-in shortcodes. You can see basic usage examples of both ref and relref in the shortcode documentation.
For an extensive explanation of how to leverage ref and relref for content management, see Cross References.</description>
    </item>
    
    <item>
      <title>render</title>
      <link>https://gohugo.io/functions/render/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/render/</guid>
      <description>The view is an alternative layout and should be a file name that points to a template in one of the locations specified in the documentation for Content Views.
This function is only available when applied to a single piece of content within a list context.
This example could render a piece of content using the content view located at /layouts/_default/summary.html:
{{ range .Data.Pages }} {{ .Render &amp;quot;summary&amp;quot;}} {{ end }}  </description>
    </item>
    
    <item>
      <title>replace</title>
      <link>https://gohugo.io/functions/replace/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/replace/</guid>
      <description>`{{ replace &amp;quot;Batman and Robin&amp;quot; &amp;quot;Robin&amp;quot; &amp;quot;Catwoman&amp;quot; }}` → &amp;quot;Batman and Catwoman&amp;quot;  </description>
    </item>
    
    <item>
      <title>replacere</title>
      <link>https://gohugo.io/functions/replacere/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/replacere/</guid>
      <description>{{ replaceRE &amp;quot;^https?://([^/]+).*&amp;quot; &amp;quot;$1&amp;quot; &amp;quot;http://gohugo.io/docs&amp;quot; }}` → &amp;quot;gohugo.io&amp;quot; {{ &amp;quot;http://gohugo.io/docs&amp;quot; | replaceRE &amp;quot;^https?://([^/]+).*&amp;quot; &amp;quot;$1&amp;quot; }}` → &amp;quot;gohugo.io&amp;quot;   Hugo uses Golang&amp;rsquo;s Regular Expression package, which is the same general syntax used by Perl, Python, and other languages but with a few minor differences for those coming from a background in PCRE. For a full syntax listing, see the GitHub wiki for re2.
If you are just learning RegEx, or at least Golang&amp;rsquo;s flavor, you can practice pattern matching in the browser at https://regex101.</description>
    </item>
    
    <item>
      <title>safeCSS</title>
      <link>https://gohugo.io/functions/safecss/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/safecss/</guid>
      <description>In this context, safe means CSS content that matches any of the following:
 The CSS3 stylesheet production, such as p { color: purple }. The CSS3 rule production, such as a[href=~&amp;quot;https:&amp;quot;].foo#bar. CSS3 declaration productions, such as color: red; margin: 2px. The CSS3 value production, such as rgba(0, 0, 255, 127).  Example: Given style = &amp;quot;color: red;&amp;quot; defined in the front matter of your .md file:
 &amp;lt;p style=&amp;quot;{{ .</description>
    </item>
    
    <item>
      <title>safeHTML</title>
      <link>https://gohugo.io/functions/safehtml/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/safehtml/</guid>
      <description>It should not be used for HTML from a third-party, or HTML with unclosed tags or comments.
Given a site-wide config.toml with the following copyright value:
copyright = &amp;quot;© 2015 Jane Doe. &amp;lt;a href=\&amp;quot;http://creativecommons.org/licenses/by/4.0/\&amp;quot;&amp;gt;Some rights reserved&amp;lt;/a&amp;gt;.&amp;quot;  {{ .Site.Copyright | safeHTML }} in a template would then output:
© 2015 Jane Doe. &amp;lt;a href=&amp;quot;http://creativecommons.org/licenses/by/4.0/&amp;quot;&amp;gt;Some rights reserved&amp;lt;/a&amp;gt;.  However, without the safeHTML function, html/template assumes .Site.Copyright to be unsafe and therefore escapes all HTML tags and renders the whole string as plain text:</description>
    </item>
    
    <item>
      <title>safeHTMLAttr</title>
      <link>https://gohugo.io/functions/safehtmlattr/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/safehtmlattr/</guid>
      <description>Example: Given a site-wide config.toml that contains this menu entry:
[[menu.main]] name = &amp;quot;IRC: #golang at freenode&amp;quot; url = &amp;quot;irc://irc.freenode.net/#golang&amp;quot;   &amp;lt;a href=&amp;quot;{{ .URL }}&amp;quot;&amp;gt; &amp;rarr; &amp;lt;a href=&amp;quot;#ZgotmplZ&amp;quot;&amp;gt; &amp;lt;a {{ printf &amp;quot;href=%q&amp;quot; .URL | safeHTMLAttr }}&amp;gt; &amp;rarr; &amp;lt;a href=&amp;quot;irc://irc.freenode.net/#golang&amp;quot;&amp;gt;  </description>
    </item>
    
    <item>
      <title>safeJS</title>
      <link>https://gohugo.io/functions/safejs/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/safejs/</guid>
      <description>In this context, safe means the string encapsulates a known safe EcmaScript5 Expression (e.g., (x + y * z())).
Template authors are responsible for ensuring that typed expressions do not break the intended precedence and that there is no statement/expression ambiguity as when passing an expression like { foo:bar() }\n[&#39;foo&#39;](), which is both a valid expression and a valid program with a very different meaning.
Example: Given hash = &amp;quot;619c16f&amp;quot; defined in the front matter of your .</description>
    </item>
    
    <item>
      <title>safeURL</title>
      <link>https://gohugo.io/functions/safeurl/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/safeurl/</guid>
      <description>safeURL declares the provided string as a &amp;ldquo;safe&amp;rdquo; URL or URL substring (see RFC 3986). A URL like javascript:checkThatFormNotEditedBeforeLeavingPage() from a trusted source should go in the page, but by default dynamic javascript: URLs are filtered out since they are a frequently exploited injection vector.
Without safeURL, only the URI schemes http:, https: and mailto: are considered safe by Go templates. If any other URI schemes (e.g., irc: and javascript:) are detected, the whole URL will be replaced with #ZgotmplZ.</description>
    </item>
    
    <item>
      <title>seq</title>
      <link>https://gohugo.io/functions/seq/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/seq/</guid>
      <description>It&amp;rsquo;s named and used in the model of GNU&amp;rsquo;s seq.
3 → 1, 2, 3 1 2 4 → 1, 3 -3 → -1, -2, -3 1 4 → 1, 2, 3, 4 1 -2 → 1, 0, -1, -2  Example: seq with range and after You can use seq in combination with range and after. The following will return 19 elements:
{{ range after 1 (seq 20)}} {{ end }}  However, when ranging with an index, the following may be less confusing in that $indexStartingAt1 and $num will return 1,2,3 .</description>
    </item>
    
    <item>
      <title>sha</title>
      <link>https://gohugo.io/functions/sha/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/sha/</guid>
      <description>sha1 hashes the given input and returns its SHA1 checksum.
{{ sha1 &amp;quot;Hello world, gophers!&amp;quot; }} &amp;lt;!-- returns the string &amp;quot;c8b5b0e33d408246e30f53e32b8f7627a7a649d4&amp;quot; --&amp;gt;  sha256 hashes the given input and returns its SHA256 checksum.
{{ sha256 &amp;quot;Hello world, gophers!&amp;quot; }} &amp;lt;!-- returns the string &amp;quot;6ec43b78da9669f50e4e422575c54bf87536954ccd58280219c393f2ce352b46&amp;quot; --&amp;gt;  </description>
    </item>
    
    <item>
      <title>shuffle</title>
      <link>https://gohugo.io/functions/shuffle/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/shuffle/</guid>
      <description>shuffle-input.html  &amp;lt;!-- Shuffled sequence = --&amp;gt; &amp;lt;div&amp;gt;{{ shuffle (seq 1 5) }}&amp;lt;/div&amp;gt; &amp;lt;!-- Shuffled slice = --&amp;gt; &amp;lt;div&amp;gt;{{ shuffle (slice &amp;quot;foo&amp;quot; &amp;quot;bar&amp;quot; &amp;quot;buzz&amp;quot;) }}&amp;lt;/div&amp;gt;    This example would return the following:
 shuffle-output.html &amp;lt;!-- Shuffled sequence = --&amp;gt; &amp;lt;div&amp;gt;2 5 3 1 4&amp;lt;/div&amp;gt; &amp;lt;!-- Shuffled slice = --&amp;gt; &amp;lt;div&amp;gt;buzz foo bar&amp;lt;/div&amp;gt;   
This example also makes use of the slice and seq functions.</description>
    </item>
    
    <item>
      <title>singularize</title>
      <link>https://gohugo.io/functions/singularize/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/singularize/</guid>
      <description>{{ &amp;quot;cats&amp;quot; | singularize }} → &amp;ldquo;cat&amp;rdquo;
See also the .Data.Singular taxonomy variable for singularizing taxonomy names.</description>
    </item>
    
    <item>
      <title>slice</title>
      <link>https://gohugo.io/functions/slice/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/slice/</guid>
      <description>One use case is the concatenation of elements in combination with the delimit function:
slice.html  {{ delimit (slice &amp;quot;foo&amp;quot; &amp;quot;bar&amp;quot; &amp;quot;buzz&amp;quot;) &amp;quot;, &amp;quot; }} &amp;lt;!-- returns the string &amp;quot;foo, bar, buzz&amp;quot; --&amp;gt;    </description>
    </item>
    
    <item>
      <title>slicestr</title>
      <link>https://gohugo.io/functions/slicestr/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/slicestr/</guid>
      <description>For example, 1 and 4 creates a slice including elements 1 through 3. The end index can be omitted; it defaults to the string&amp;rsquo;s length.
 {{slicestr &amp;quot;BatMan&amp;quot; 3}} → &amp;ldquo;Man&amp;rdquo; {{slicestr &amp;quot;BatMan&amp;quot; 0 3}} → &amp;ldquo;Bat&amp;rdquo;  </description>
    </item>
    
    <item>
      <title>sort</title>
      <link>https://gohugo.io/functions/sort/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/sort/</guid>
      <description>A sorted array of map values will be returned with the keys eliminated. There are two optional arguments: sortByField and sortAsc. If left blank, sort will sort by keys (for maps) in ascending order as its default behavior.
+++ #tags: [ &amp;quot;tag3&amp;quot;, &amp;quot;tag1&amp;quot;, &amp;quot;tag2&amp;quot; ] +++ // Site config +++ [params.authors] [params.authors.Derek] &amp;quot;firstName&amp;quot; = &amp;quot;Derek&amp;quot; &amp;quot;lastName&amp;quot; = &amp;quot;Perkins&amp;quot; [params.authors.Joe] &amp;quot;firstName&amp;quot; = &amp;quot;Joe&amp;quot; &amp;quot;lastName&amp;quot; = &amp;quot;Bergevin&amp;quot; [params.authors.Tanner] &amp;quot;firstName&amp;quot; = &amp;quot;Tanner&amp;quot; &amp;quot;lastName&amp;quot; = &amp;quot;Linsley&amp;quot; +++  // Use default sort options - sort by key / ascending Tags: {{ range sort .</description>
    </item>
    
    <item>
      <title>split</title>
      <link>https://gohugo.io/functions/split/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/split/</guid>
      <description> {{split &amp;quot;tag1,tag2,tag3&amp;quot; &amp;quot;,&amp;quot; }} → [&amp;ldquo;tag1&amp;rdquo; &amp;ldquo;tag2&amp;rdquo; &amp;ldquo;tag3&amp;rdquo;]  </description>
    </item>
    
    <item>
      <title>string</title>
      <link>https://gohugo.io/functions/string/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/string/</guid>
      <description> {{string &amp;quot;BatMan&amp;quot;}} → &amp;ldquo;BatMan&amp;rdquo;  </description>
    </item>
    
    <item>
      <title>substr</title>
      <link>https://gohugo.io/functions/substr/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/substr/</guid>
      <description>It normally takes two parameters: start and length. It can also take one parameter: start, i.e. length is omitted, in which case the substring starting from start until the end of the string will be returned.
To extract characters from the end of the string, use a negative start number.
In addition, borrowing from the extended behavior described at http://php.net substr, if length is given and is negative, that number of characters will be omitted from the end of string.</description>
    </item>
    
    <item>
      <title>time</title>
      <link>https://gohugo.io/functions/time/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/time/</guid>
      <description>time converts a timestamp string into a time.Time structure so you can access its fields:
{{ time &amp;quot;2016-05-28&amp;quot; }} → &amp;quot;2016-05-28T00:00:00Z&amp;quot; {{ (time &amp;quot;2016-05-28&amp;quot;).YearDay }} → 149 {{ mul 1000 (time &amp;quot;2016-05-28T10:30:00.00+10:00&amp;quot;).Unix }} → 1464395400000, or Unix time in milliseconds  Example: Using time to get Month Index The following example takes a UNIX timestamp&amp;mdash;set as utimestamp: &amp;quot;1489276800&amp;quot; in a content&amp;rsquo;s front matter&amp;mdash;converts the timestamp (string) to an integer using the int function, and then uses printf to convert the Month property of time into an index.</description>
    </item>
    
    <item>
      <title>title</title>
      <link>https://gohugo.io/functions/title/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/title/</guid>
      <description>{{title &amp;quot;BatMan&amp;quot;}}` → &amp;quot;Batman&amp;quot;  </description>
    </item>
    
    <item>
      <title>trim</title>
      <link>https://gohugo.io/functions/trim/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/trim/</guid>
      <description>{{ trim &amp;quot;++Batman--&amp;quot; &amp;quot;+-&amp;quot; }} → &amp;quot;Batman&amp;quot;  trim requires the second argument, which tells the function specifically what to remove from the first argument. There is no default value for the second argument, so the following usage will not work:
{{ trim .Inner}}  Instead, the following example tells trim to remove extra new lines from the content contained in the shortcode .Inner variable:
{{ trim .Inner &amp;quot;\n&amp;quot; }}   Go templates also provide a simple method for trimming whitespace from either side of a Go tag by including a hyphen (-).</description>
    </item>
    
    <item>
      <title>truncate</title>
      <link>https://gohugo.io/functions/truncate/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/truncate/</guid>
      <description>Since Go templates are HTML-aware, truncate will intelligently handle normal strings vs HTML strings:
{{ &amp;quot;&amp;lt;em&amp;gt;Keep my HTML&amp;lt;/em&amp;gt;&amp;quot; | safeHTML | truncate 10 }}` → &amp;lt;em&amp;gt;Keep my …&amp;lt;/em&amp;gt;`   If you have a raw string that contains HTML tags you want to remain treated as HTML, you will need to convert the string to HTML using the safeHTML template function before sending the value to truncate. Otherwise, the HTML tags will be escaped when passed through the truncate function.</description>
    </item>
    
    <item>
      <title>union</title>
      <link>https://gohugo.io/functions/union/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/union/</guid>
      <description>Given two arrays (or slices) A and B, this function will return a new array that contains the elements or objects that belong to either A or to B or to both. The elements supported are strings, integers, and floats (only float64).
{{ union (slice 1 2 3) (slice 3 4 5) }} &amp;lt;!-- returns [1 2 3 4 5] --&amp;gt; {{ union (slice 1 2 3) nil }} &amp;lt;!-- returns [1 2 3] --&amp;gt; {{ union nil (slice 1 2 3) }} &amp;lt;!</description>
    </item>
    
    <item>
      <title>uniq</title>
      <link>https://gohugo.io/functions/uniq/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/uniq/</guid>
      <description>{{ uniq (slice 1 2 3 2) }} {{ slice 1 2 3 2 | uniq }} &amp;lt;!-- both return [1 2 3] --&amp;gt;  </description>
    </item>
    
    <item>
      <title>upper</title>
      <link>https://gohugo.io/functions/upper/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/upper/</guid>
      <description>Note that upper can be applied in your templates in more than one way:
{{ upper &amp;quot;BatMan&amp;quot; }} → &amp;quot;BATMAN&amp;quot; {{ &amp;quot;BatMan&amp;quot; | upper }} → &amp;quot;BATMAN&amp;quot;  </description>
    </item>
    
    <item>
      <title>urlize</title>
      <link>https://gohugo.io/functions/urlize/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/urlize/</guid>
      <description>The following examples pull from a content file with the following front matter:
content/blog/greatest-city.md +++ title = &amp;quot;The World&#39;s Greatest City&amp;quot; location = &amp;quot;Chicago IL&amp;quot; tags = [&amp;quot;pizza&amp;quot;,&amp;quot;beer&amp;quot;,&amp;quot;hot dogs&amp;quot;] +++    The following might be used as a partial within a single page template:
layouts/partials/content-header.html  &amp;lt;header&amp;gt; &amp;lt;h1&amp;gt;{{.Title}}&amp;lt;/h1&amp;gt; {{ with .Params.location }} &amp;lt;div&amp;gt;&amp;lt;a href=&amp;quot;/locations/{{ . | urlize}}&amp;quot;&amp;gt;{{.}}&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt; {{ end }} &amp;lt;!-- Creates a list of tags for the content and links to each of their pages --&amp;gt; {{ with .</description>
    </item>
    
    <item>
      <title>where</title>
      <link>https://gohugo.io/functions/where/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/where/</guid>
      <description>where filters an array to only the elements containing a matching value for a given field.
{{ range where .Data.Pages &amp;quot;Section&amp;quot; &amp;quot;post&amp;quot; }} {{ .Content }} {{ end }}  It can be used by dot-chaining the second argument to refer to a nested element of a value.
+++ series: golang +++  {{ range where .Site.Pages &amp;quot;Params.series&amp;quot; &amp;quot;golang&amp;quot; }} {{ .Content }} {{ end }}  It can also be used with the logical operators !</description>
    </item>
    
    <item>
      <title>with</title>
      <link>https://gohugo.io/functions/with/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/functions/with/</guid>
      <description>An alternative way of writing an if statement and then referencing the same value is to use with instead. with rebinds the context (.) within its scope and skips the block if the variable is absent or unset.
The following example checks for a user-defined site variable called twitteruser. If the key-value is not set, the following will render nothing:
layouts/partials/twitter.html  {{with .Site.Params.twitteruser}}&amp;lt;span class=&amp;quot;twitter&amp;quot;&amp;gt; &amp;lt;a href=&amp;quot;https://twitter.com/{{.}}&amp;quot; rel=&amp;quot;author&amp;quot;&amp;gt; &amp;lt;img src=&amp;quot;/images/twitter.png&amp;quot; width=&amp;quot;48&amp;quot; height=&amp;quot;48&amp;quot; title=&amp;quot;Twitter: {{.</description>
    </item>
    
    <item>
      <title>December Hugo Release</title>
      <link>https://gohugo.io/news/0-18/</link>
      <pubDate>Fri, 30 Dec 2016 13:54:02 -0400</pubDate>
      
      <guid>https://gohugo.io/news/0-18/</guid>
      <description>Hugo 0.18.1 is a bug fix release fixing some issues introduced in Hugo 0.18:
 Fix 32-bit binaries #2847  Fix issues with preserveTaxonomyNames #2809  Fix .URL for taxonomy pages when uglyURLs=true #2819  Fix IsTranslated and Translations for node pages #2812  Make template error messages more verbose #2820   0.18.0 December 19th 2016 Today, we&amp;rsquo;re excited to release the much-anticipated Hugo 0.18!
We&amp;rsquo;re heading towards the end of the year 2016, and we can look back on three releases and a steady growing community around the project.</description>
    </item>
    
    <item>
      <title>October Release: Hugo is going global</title>
      <link>https://gohugo.io/news/0-17/</link>
      <pubDate>Fri, 07 Oct 2016 13:54:06 -0400</pubDate>
      
      <guid>https://gohugo.io/news/0-17/</guid>
      <description>Hugo is going global with our 0.17 release. We put a lot of thought into how we could extend Hugo to support multilingual websites with the most simple and elegant experience. Hugo&amp;rsquo;s multilingual capabilities rival the best web and documentation software, but Hugo&amp;rsquo;s experience is unmatched. If you have a single language website, the simple Hugo experience you already love is unchanged. Adding additional languages to your website is simple and straightforward.</description>
    </item>
    
    <item>
      <title>June Release</title>
      <link>https://gohugo.io/news/0-16/</link>
      <pubDate>Mon, 06 Jun 2016 13:54:06 -0400</pubDate>
      
      <guid>https://gohugo.io/news/0-16/</guid>
      <description>Hugo 0.16 is our best and biggest release ever. The Hugo community has outdone itself with continued performance improvements, beautiful themes for all types of sites from project sites to documentation to blogs to portfolios, and increased stability.
This release represents over 550 contributions by over 110 contributors to the main Hugo code base. Since last release Hugo has gained 3500 stars, 90 contributors and 23 additional themes.
This release celebrates 3 years since @spf13 wrote the first lines of Hugo.</description>
    </item>
    
    <item>
      <title>Release Notes</title>
      <link>https://gohugo.io/news/release-notes/</link>
      <pubDate>Mon, 01 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/news/release-notes/</guid>
      <description>0.20.2 April 16th 2017 Hugo 0.20.2 adds support for plain text partials included into HTML templates. This was a side-effect of the big new Custom Output Format feature in 0.20, and while the change was intentional and there was an ongoing discussion about fixing it in #3273 , it did break some themes. There were valid workarounds for these themes, but we might as well get it right.
The most obvious use case for this is inline CSS styles, which you now can do without having to name your partials with a html suffix.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://gohugo.io/readfiles/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/readfiles/readme/</guid>
      <description>readdirs Directory for Reusable Content Files in this directory are:
 Used in more than one place within the Hugo docs Used in Examples of readdir (i.e. in local file templates)  These files are called using the readfile shortcode (source).
You can call this shortcode in the docs as follows:
{{% readfile file=&amp;ldquo;/path/to/file.txt&amp;rdquo; markdown=&amp;ldquo;true&amp;rdquo; %}}
markdown=&amp;quot;true&amp;quot; is optional (default = &amp;quot;false&amp;quot;) and parses the string through the Blackfriday renderer.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://gohugo.io/readfiles/bfconfig/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/readfiles/bfconfig/</guid>
      <description>taskLists default: true
Blackfriday flag: Purpose: false turns off GitHub-style automatic task/TODO list generation smartypants default: true Blackfriday flag: HTML_USE_SMARTYPANTS Purpose: false disables smart punctuation substitutions, including smart quotes, smart dashes, smart fractions, etc. If true, it may be fine-tuned with the angledQuotes, fractions, smartDashes, and latexDashes flags (see below). angledQuotes default: false
Blackfriday flag: HTML_SMARTYPANTS_ANGLED_QUOTES
Purpose: true enables smart, angled double quotes. Example: &amp;ldquo;Hugo&amp;rdquo; renders to renders to «Hugo» instead of “Hugo”.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://gohugo.io/readfiles/dateformatting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/readfiles/dateformatting/</guid>
      <description>Go templates format your dates according to a single reference time:
Mon Jan 2 15:04:05 MST 2006  You can think of MST as 07, thus making the reference format string a sequence of numbers. The following is taken directly from the Go docs:
Jan 2 15:04:05 2006 MST 1 2 3 4 5 6 -7  Hugo Date Templating Reference Each of the following examples show the reference formatting string followed by the string Hugo will output in your HTML.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://gohugo.io/readfiles/menuvars/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/readfiles/menuvars/</guid>
      <description> .URL string .Name string .Menu string .Identifier string .Pre template.HTML .Post template.HTML .Weight int .Parent string .Children Menu Note that menus also have the following functions available as well: boolean
 Additionally, there are some relevant functions available to menus on a page: (menu string, menuEntry *MenuEntry ) boolean
 (menu string, menuEntry *MenuEntry) boolean
  </description>
    </item>
    
  </channel>
</rss>